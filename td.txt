All of the files and code in here belong to the server in the root directory: prospera-home/team-dashboard

These are only the files that have to deal with communication to the server from the team-dashboard.

The structure of defining the files within this document is like this:

"Filepath"

"Code for file:"

```
code
```

Files separated by: "---------------------------------------------------------"

Let's Begin

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/auth/forgot-password/index.js

Code for file: prospera-home/team-dashboard/src/auth/forgot-password/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/
import { useState, useEffect } from "react";
// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDButton from "components/MDButton";
import MDAlert from "components/MDAlert";

// Authentication layout components
import CoverLayout from "layouts/authentication/components/CoverLayout";

// Images
import bgImage from "assets/images/bg-reset-cover.jpeg";

import authService from "services/auth-service";

function ForgotPassword() {
  const [isDemo, setIsDemo] = useState(false);
  const [input, setEmail] = useState({
    email: "",
  });
  const [error, setError] = useState({
    err: false,
    textError: "",
  });

  const [notification, setNotification] = useState(false);

  const changeHandler = (e) => {
    setEmail({
      [e.target.name]: e.target.value,
    });
  };

  useEffect(() => {
    setIsDemo(process.env.REACT_APP_IS_DEMO === "true");
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const mailFormat =  /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (input.email.trim().length === 0 || !input.email.trim().match(mailFormat)) {
      setError({ err: true, textError: "The email must be valid" });
      return;
    }

    // somthing not right with the data
    const myData = {
      data: {
        type: "password-forgot",
        attributes: {
          redirect_url: `${process.env.REACT_APP_URL}/auth/reset-password`,
          ...input,
        },
      },
    };

    try {
      if (isDemo == false) {
        const res = await authService.forgotPassword(myData);
        setError({ err: false, textError: "" });
      }
      setNotification(true);
    } catch (err) {
      console.error(err);
      if (err.hasOwnProperty("errors")) {
        setError({ err: true, textError: err.errors.email[0] });
      }
      return null;
    }
  };

  return (
    <CoverLayout coverHeight="50vh" image={bgImage}>
      <Card>
        <MDBox
          variant="gradient"
          bgColor="info"
          borderRadius="lg"
          coloredShadow="success"
          mx={2}
          mt={-3}
          py={2}
          mb={1}
          textAlign="center"
        >
          <MDTypography variant="h3" fontWeight="medium" color="white" mt={1}>
            Reset Password
          </MDTypography>
          <MDTypography display="block" variant="button" color="white" my={1}>
            You will receive an e-mail in maximum 60 seconds
          </MDTypography>
        </MDBox>
        <MDBox pt={4} pb={3} px={3}>
          <MDBox component="form" role="form" method="POST" onSubmit={handleSubmit}>
            <MDBox mb={4}>
              <MDInput
                type="email"
                label="Email"
                variant="standard"
                fullWidth
                value={input.email}
                name="email"
                onChange={changeHandler}
                error={error.err}
              />
            </MDBox>

            {error.err && (
              <MDTypography variant="caption" color="error" fontWeight="light">
                {error.textError}
              </MDTypography>
            )}

            <MDBox mt={6} mb={1}>
              <MDButton variant="gradient" color="info" fullWidth type="submit">
                reset
              </MDButton>
            </MDBox>
          </MDBox>
        </MDBox>
      </Card>
      {notification && (
        <MDAlert color="info" mt="20px" dismissible>
          <MDTypography variant="body2" color="white">
            {isDemo
              ? "You can't update the password in the demo version"
              : "Please check your email to reset your password."}
          </MDTypography>
        </MDAlert>
      )}
    </CoverLayout>
  );
}

export default ForgotPassword;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/auth/login/index.js

Code for file: prospera-home/team-dashboard/src/auth/login/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useContext, useState } from "react";

// react-router-dom components
import { Link } from "react-router-dom";

// @mui material components
import Switch from "@mui/material/Switch";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDButton from "components/MDButton";

import AuthService from "services/auth-service";
import { AuthContext } from "context";

// Authentication layout components
import IllustrationLayout from "layouts/authentication/components/IllustrationLayout";

// Image
import bgImage from "assets/images/illustrations/illustration-reset.jpg";

function Login() {
  const authContext = useContext(AuthContext);
  const [rememberMe, setRememberMe] = useState(false);
  const [inputs, setInputs] = useState({
    email: "admin@jsonapi.com",
    password: "secret",
  });
  const [errors, setErrors] = useState({
    emailError: false,
    passwordError: false,
    credentialsErros: false,
    textError: "",
  });

  const handleSetRememberMe = () => setRememberMe(!rememberMe);

  const changeHandler = (e) => {
    setInputs({
      ...inputs,
      [e.target.name]: e.target.value,
    });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    const mailFormat =  /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (inputs.email.trim().length === 0 || !inputs.email.trim().match(mailFormat)) {
      setErrors({ ...errors, emailError: true });
      return;
    }

    if (inputs.password.trim().length < 6) {
      setErrors({ ...errors, passwordError: true });
      return;
    }

    const newUser = { email: inputs.email, password: inputs.password };

    const myData = {
      data: {
        type: "token",
        attributes: { ...newUser },
      },
    };

    try {
      const response = await AuthService.login(myData);
      authContext.login(response.access_token, response.refresh_token);
    } catch (res) {
      if (res.hasOwnProperty("message")) {
        setErrors({ ...errors, credentialsErros: true, textError: res.message });
      } else {
        setErrors({ ...errors, credentialsErros: true, textError: res.errors[0].detail });
      }
    }

    return () => {
      setInputs({
        email: "",
        password: "",
      });

      setErrors({
        emailError: false,
        passwordError: false,
        credentialsErros: false,
        textError: "",
      });
    };
  };

  return (
    <IllustrationLayout
      title="Sign In"
      description="Enter your email and password to sign in"
      illustration={bgImage}
    >
      <MDBox component="form" role="form" method="POST" onSubmit={submitHandler}>
        <MDBox display="flex" justifyContent="center" alignItems="center" flexDirection="column">
          <MDTypography color="dark" fontWeight="light" variant="body2" mb={1}>
            You can sign in with 3 user types:
          </MDTypography>
          <MDBox display="flex" justifyContent="center" alignItems="center" flexDirection="column">
            <MDBox
              display="flex"
              flexDirection="column"
              justifyContent="center"
              alignItems="center"
              mb={2}
            >
              <MDTypography variant="body2" textAlign="center">
                <MDTypography component="span" variant="body2" sx={{ fontWeight: "medium" }}>
                  admin@jsonapi.com
                </MDTypography>
                &nbsp;with password&nbsp;
                <MDTypography component="span" variant="body2" sx={{ fontWeight: "medium" }}>
                  secret
                </MDTypography>
              </MDTypography>
              <MDTypography variant="body2" textAlign="center">
                <MDTypography component="span" variant="body2" sx={{ fontWeight: "medium" }}>
                  creator@jsonapi.com
                </MDTypography>
                &nbsp;with password&nbsp;
                <MDTypography component="span" variant="body2" sx={{ fontWeight: "medium" }}>
                  secret
                </MDTypography>
              </MDTypography>
              <MDTypography variant="body2" textAlign="center">
                <MDTypography component="span" variant="body2" sx={{ fontWeight: "medium" }}>
                  member@jsonapi.com
                </MDTypography>
                &nbsp;with password&nbsp;
                <MDTypography component="span" variant="body2" sx={{ fontWeight: "medium" }}>
                  secret
                </MDTypography>
              </MDTypography>
            </MDBox>
          </MDBox>
        </MDBox>
        <MDBox mb={2}>
          <MDInput
            type="email"
            label="Email"
            fullWidth
            name="email"
            value={inputs.email}
            onChange={changeHandler}
            error={errors.emailError}
          />
        </MDBox>
        <MDBox mb={2}>
          <MDInput
            type="password"
            label="Password"
            fullWidth
            name="password"
            value={inputs.password}
            onChange={changeHandler}
            error={errors.passwordError}
          />
        </MDBox>
        <MDBox display="flex" alignItems="center" ml={-1}>
          <Switch checked={rememberMe} onChange={handleSetRememberMe} />
          <MDTypography
            variant="button"
            fontWeight="regular"
            color="text"
            onClick={handleSetRememberMe}
            sx={{ cursor: "pointer", userSelect: "none", ml: -1 }}
          >
            &nbsp;&nbsp;Remember me
          </MDTypography>
        </MDBox>
        {errors.credentialsErros && (
          <MDTypography variant="caption" color="error" fontWeight="light">
            {errors.textError}
          </MDTypography>
        )}
        <MDBox mt={4} mb={1}>
          <MDButton variant="gradient" color="info" size="large" fullWidth type="submit">
            sign in
          </MDButton>
        </MDBox>
        <MDBox mt={3} mb={1} textAlign="center">
          <MDTypography variant="button" color="text">
            Forgot your password? Reset it{" "}
            <MDTypography
              component={Link}
              to="/auth/forgot-password"
              variant="button"
              color="info"
              fontWeight="medium"
              textGradient
            >
              here
            </MDTypography>
          </MDTypography>
        </MDBox>
        <MDBox mt={3} textAlign="center">
          <MDTypography variant="button" color="text">
            Don&apos;t have an account?{" "}
            <MDTypography
              component={Link}
              to="/auth/register"
              variant="button"
              color="info"
              fontWeight="medium"
              textGradient
            >
              Sign up
            </MDTypography>
          </MDTypography>
        </MDBox>
      </MDBox>
    </IllustrationLayout>
  );
}

export default Login;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/auth/logout/index.js

Code for file: prospera-home/team-dashboard/src/auth/logout/index.js

```
import { useContext } from "react";
import { AuthContext } from "context";
import AuthService from "services/auth-service";

const Logout = ({ children }) => {
  const authContext = useContext(AuthContext);

  useEffect(async () => {
    const response = await AuthService.logout();
    authContext.logout();
  });
  return <>{children}</>;
};

export default Logout;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/auth/register/index.js

Code for file: prospera-home/team-dashboard/src/auth/register/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

// react-router-dom components
import { useContext, useState } from "react";
import { Link } from "react-router-dom";

// @mui material components
import Card from "@mui/material/Card";
import Checkbox from "@mui/material/Checkbox";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDButton from "components/MDButton";

// Authentication layout components
import CoverLayout from "layouts/authentication/components/CoverLayout";

// Images
import bgImage from "assets/images/bg-sign-up-cover.jpeg";

import { AuthContext } from "context";
import AuthService from "services/auth-service";
import { InputLabel } from "@mui/material";

function Register() {
  const authContext = useContext(AuthContext);

  const [inputs, setInputs] = useState({
    name: "",
    email: "",
    password: "",
    confirmPass: "",
    agree: false,
  });

  const [errors, setErrors] = useState({
    nameError: false,
    emailError: false,
    passwordError: false,
    confirmPassError: false,
    agreeError: false,
    emailTaken: false,
  });

  const changeHandler = (e) => {
    setInputs({
      ...inputs,
      [e.target.name]: e.target.value,
    });
  };
  const submitHandler = async (e) => {
    e.preventDefault();
    const mailFormat = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (inputs.name.trim().length === 0) {
      setErrors({ ...errors, nameError: true });
      return;
    }

    if (inputs.email.trim().length === 0 || !inputs.email.trim().match(mailFormat)) {
      setErrors({ ...errors, emailError: true });
      return;
    }

    if (inputs.password.trim().length < 8) {
      setErrors({ ...errors, passwordError: true });
      return;
    }

    if (inputs.confirmPass.trim() !== inputs.password.trim()) {
      setErrors({ ...errors, confirmPassError: true });
      return;
    }

    if (inputs.agree === false) {
      setErrors({ ...errors, agreeError: true });
      return;
    }
    // here will be the post action to add a user to the db
    const newUser = { name: inputs.name, email: inputs.email, password: inputs.password };
    const myData = {
      data: {
        type: "users",
        attributes: { ...newUser, password_confirmation: newUser.password },
      },
    };

    try {
      const response = await AuthService.register(myData);
      authContext.login(response.access_token);
    } catch (err) {
      setErrors({ ...errors, emailTaken: true });
      console.error(err);
      return null;
    }

    setInputs({
      name: "",
      email: "",
      password: "",
      confirmPass: "",
      agree: false,
    });

    setErrors({
      nameError: false,
      emailError: false,
      passwordError: false,
      confirmPassError: false,
      agreeError: false,
      emailTaken: false,
    });
  };

  return (
    <CoverLayout image={bgImage}>
      <Card>
        <MDBox
          variant="gradient"
          bgColor="info"
          borderRadius="lg"
          coloredShadow="success"
          mx={2}
          mt={-3}
          p={3}
          mb={1}
          textAlign="center"
        >
          <MDTypography variant="h4" fontWeight="medium" color="white" mt={1}>
            Join us today
          </MDTypography>
          <MDTypography display="block" variant="button" color="white" my={1}>
            Enter your email and password to register
          </MDTypography>
        </MDBox>
        <MDBox pt={4} pb={3} px={3}>
          <MDBox component="form" role="form" method="submit" onSubmit={submitHandler}>
            <MDBox mb={2}>
              <MDInput
                type="text"
                label="Name"
                variant="standard"
                fullWidth
                name="name"
                value={inputs.name}
                onChange={changeHandler}
                error={errors.nameError}
                inputProps={{
                  autoComplete: "name",
                  form: {
                    autoComplete: "off",
                  },
                }}
              />
              {errors.nameError && (
                <MDTypography variant="caption" color="error" fontWeight="light">
                  The name can not be empty
                </MDTypography>
              )}
            </MDBox>
            <MDBox mb={2}>
              <MDInput
                type="email"
                label="Email"
                variant="standard"
                fullWidth
                name="email"
                value={inputs.email}
                onChange={changeHandler}
                error={errors.emailError}
                inputProps={{
                  autoComplete: "email",
                  form: {
                    autoComplete: "off",
                  },
                }}
              />
              {errors.emailError && (
                <MDTypography variant="caption" color="error" fontWeight="light">
                  The email must be valid
                </MDTypography>
              )}
            </MDBox>
            <MDBox mb={2}>
              <MDInput
                type="password"
                label="Password"
                variant="standard"
                fullWidth
                name="password"
                value={inputs.password}
                onChange={changeHandler}
                error={errors.passwordError}
              />
              {errors.passwordError && (
                <MDTypography variant="caption" color="error" fontWeight="light">
                  The password must be of at least 8 characters
                </MDTypography>
              )}
            </MDBox>
            <MDBox mb={2}>
              <MDInput
                type="password"
                label="Confirm Password"
                variant="standard"
                fullWidth
                name="confirmPass"
                value={inputs.confirmPass}
                onChange={changeHandler}
                error={errors.confirmPassError}
              />
              {errors.confirmPassError && (
                <MDTypography variant="caption" color="error" fontWeight="light">
                  The passwords must match
                </MDTypography>
              )}
            </MDBox>
            {errors.roleError && (
              <MDTypography variant="caption" color="error" fontWeight="light">
                You must choose a role
              </MDTypography>
            )}
            <MDBox display="flex" alignItems="center" ml={-1}>
              <Checkbox name="agree" id="agree" onChange={changeHandler} />
              <InputLabel
                variant="standard"
                fontWeight="regular"
                color="text"
                sx={{ lineHeight: "1.5", cursor: "pointer" }}
                htmlFor="agree"
              >
                &nbsp;&nbsp;I agree to the&nbsp;
              </InputLabel>
              <MDTypography
                component="a"
                href="#"
                variant="button"
                fontWeight="bold"
                color="info"
                textGradient
              >
                Terms and Conditions
              </MDTypography>
            </MDBox>
            {errors.agreeError && (
              <MDTypography variant="caption" color="error" fontWeight="light">
                You must agree to the Terms and Conditions
              </MDTypography>
            )}
            {errors.emailTaken && (
              <MDTypography variant="caption" color="error" fontWeight="light">
                The email address has already been taken
              </MDTypography>
            )}
            <MDBox mt={4} mb={1}>
              <MDButton variant="gradient" color="info" fullWidth type="submit">
                sign in
              </MDButton>
            </MDBox>
            <MDBox mt={3} mb={1} textAlign="center">
              <MDTypography variant="button" color="text">
                Already have an account?{" "}
                <MDTypography
                  component={Link}
                  to="/auth/login"
                  variant="button"
                  color="info"
                  fontWeight="medium"
                  textGradient
                >
                  Sign In
                </MDTypography>
              </MDTypography>
            </MDBox>
          </MDBox>
        </MDBox>
      </Card>
    </CoverLayout>
  );
}

export default Register;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/auth/reset-password/index.js

Code for file: prospera-home/team-dashboard/src/auth/reset-password/index.js

```
import { useEffect, useState } from "react";
// react-router-dom components
import { Link } from "react-router-dom";

// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDButton from "components/MDButton";
import MDAlert from "components/MDAlert";

// Authentication layout components
import CoverLayout from "layouts/authentication/components/CoverLayout";

// Images
import bgImage from "assets/images/bg-sign-up-cover.jpeg";

import AuthService from "services/auth-service";

// for the reset I should take from the url the token sent and the email
const PasswordReset = () => {
  const [token, setToken] = useState(null);
  const [email, setEmail] = useState(null);
  const [notification, setNotification] = useState(false);

  const [inputs, setInputs] = useState({
    password: "",
    password_confirmation: "",
  });

  const [errors, setErrors] = useState({
    passwordError: false,
    confirmationError: false,
    error: false,
    textError: "",
  });

  const changeHandler = (e) => {
    setInputs({
      ...inputs,
      [e.target.name]: e.target.value,
    });
  };

  useEffect(() => {
    // get the token and email sent in the url
    const queryParams = new URLSearchParams(window.location.search);
    setToken(queryParams.get("token"));
    setEmail(queryParams.get("email"));
  }, []);

  const submitHandler = async (e) => {
    e.preventDefault();

    if (inputs.password.trim().length < 6) {
      setErrors({ ...errors, passwordError: true });
      return;
    }

    if (inputs.password_confirmation.trim() !== inputs.password.trim()) {
      setErrors({ ...errors, confirmationError: true });
      return;
    }

    const formData = {
      password: inputs.password,
      password_confirmation: inputs.password_confirmation,
      email,
      token,
    };

    const myData = {
      data: {
        type: "password-reset",
        attributes: { ...formData },
      },
    };

    try {
      const res = await AuthService.resetPassword(myData);
      setInputs({
        password: "",
        password_confirmation: "",
      });

      setErrors({
        passwordError: false,
        confirmationError: false,
        error: false,
        textError: "",
      });

      if (errors.passwordError === false && errors.confirmationError === false) {
        setNotification(true);
      }
    } catch (err) {
      console.error(err);
      setErrors({ ...errors, error: true, textError: err.errors.password[0] });
      return null;
    }
  };

  return (
    <CoverLayout image={bgImage}>
      <Card>
        <MDBox
          variant="gradient"
          bgColor="info"
          borderRadius="lg"
          coloredShadow="success"
          mx={2}
          mt={-3}
          p={3}
          mb={1}
          textAlign="center"
        >
          <MDTypography variant="h4" fontWeight="medium" color="white" mt={1}>
            Join us today
          </MDTypography>
          <MDTypography display="block" variant="button" color="white" my={1}>
            Enter your new password and its confimrmation for update
          </MDTypography>
        </MDBox>
        <MDBox pt={4} pb={3} px={3}>
          <MDBox component="form" role="form" method="POST" onSubmit={submitHandler}>
            <MDBox mb={2}>
              <MDInput
                type="password"
                label="Password"
                variant="standard"
                fullWidth
                name="password"
                value={inputs.password}
                onChange={changeHandler}
                error={errors.passwordError}
              />
            </MDBox>
            <MDBox mb={2}>
              <MDInput
                type="password"
                label="Password Confirmation"
                variant="standard"
                fullWidth
                name="password_confirmation"
                value={inputs.password_confirmation}
                onChange={changeHandler}
                error={errors.confirmationError}
              />
            </MDBox>

            {errors.error && (
              <MDTypography variant="caption" color="error" fontWeight="light">
                {errors.textError}
              </MDTypography>
            )}

            <MDBox mt={4} mb={1}>
              <MDButton variant="gradient" color="info" fullWidth type="submit">
                change
              </MDButton>
            </MDBox>
            <MDBox mt={3} mb={1} textAlign="center">
              <MDTypography variant="button" color="text">
                Already have an account?{" "}
                <MDTypography
                  component={Link}
                  to="/auth/login"
                  variant="button"
                  color="info"
                  fontWeight="medium"
                  textGradient
                >
                  Sign In
                </MDTypography>
              </MDTypography>
            </MDBox>
          </MDBox>
        </MDBox>
      </Card>
      {notification && (
        <MDAlert color="info" mt="20px" dismissible>
          <MDTypography variant="body2" color="white">
            Your password change was successful. Go back to
            <MDTypography
              component={Link}
              to="/auth/login"
              variant="body2"
              fontWeight="medium"
              color="white"
            >
              &nbsp;login&nbsp;
            </MDTypography>
            to authenticate.
          </MDTypography>
        </MDAlert>
      )}
    </CoverLayout>
  );
};

export default PasswordReset;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/config/Permissions/index.js

Code for file: prospera-home/team-dashboard/src/config/Permissions/index.js

```
import CrudService from "services/cruds-service";

export const getPermissions = async (id) => {
  try {
    const res = await CrudService.getUserWithPermissions(id);
    const permissions = res.included;;
    let jsonPermissions = [];
    permissions.map((permission) => {
      if (permission.type == "permissions") {
        const namePermission = permission.attributes.name.split(" ");
        if (namePermission.length === 2) {
          const action = namePermission[0];
          const subject = namePermission[1];
          if ((action === "delete" || action === "edit") && subject === "users") {
            jsonPermissions = [
              ...jsonPermissions,
              { action, subject, conditions: { id: { $ne: id } } },
            ];
          } else {
            jsonPermissions = [...jsonPermissions, { action, subject }];
          }
        }
      }
    });
    return jsonPermissions;
  } catch (err) {
    console.error(err);
    return null;
  }
};
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/context/index.js

Code for file: prospera-home/team-dashboard/src/context/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

/**
  This file is used for controlling the global states of the components,
  you can customize the states for the different components here.
*/

import { createContext, useContext, useEffect, useMemo, useReducer, useState } from "react";

// prop-types is a library for typechecking of props
import PropTypes from "prop-types";
import { useLocation, useNavigate } from "react-router-dom";

import CrudService from "services/cruds-service";
import AuthService from "services/auth-service";

// The Material Dashboard 2 PRO React main context
const MaterialUI = createContext();

// the authentication context
export const AuthContext = createContext({
  isAuthenticated: false,
  login: () => {},
  register: () => {},
  logout: () => {},
  getCurrentUser: () => {},
  getRole: () => {},
});

const AuthContextProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const navigate = useNavigate();
  const location = useLocation();

  const token = localStorage.getItem("token");

  useEffect(() => {
    if (!token) return;

    setIsAuthenticated(true);
    navigate(location.pathname);
  }, []);

  useEffect(() => {
    if (!token) return;

    navigate(location.pathname);
  }, [isAuthenticated]);

  const login = (newToken) => {
    localStorage.setItem("token", newToken);
    setIsAuthenticated(true);
    navigate("/dashboard/analytics");
  };

  const logout = () => {
    localStorage.removeItem("token");
    setIsAuthenticated(false);
    navigate("/auth/login");
  };

  const getCurrentUser = async () => {
    try {
      const res = await AuthService.getProfile();
      return res.data.id;
    } catch (err) {
      console.error(err);
      return null;
    }
  };

  const getRole = async () => {
    // first get the current user id
    const id = await getCurrentUser();
    try {
      // second I get the user with role
      const res = await CrudService.getUser(id);
      const roleId = res.data.relationships.roles.data[0].id;
      // third check the role id and return the role type
      if (roleId === "1") {
        return "admin";
      }
      if (roleId === "2") {
        return "creator";
      }
      if (roleId === 3) {
        return "member";
      }
      return res.included[0].attributes.name;
    } catch (err) {
      console.error(err);
      return null;
    }
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated, login, logout, getRole, getCurrentUser }}>
      {children}
    </AuthContext.Provider>
  );
};

// Setting custom name for the context which is visible on react dev tools
MaterialUI.displayName = "MaterialUIContext";

// Material Dashboard 2 PRO React reducer
function reducer(state, action) {
  switch (action.type) {
    case "MINI_SIDENAV": {
      return { ...state, miniSidenav: action.value };
    }
    case "TRANSPARENT_SIDENAV": {
      return { ...state, transparentSidenav: action.value };
    }
    case "WHITE_SIDENAV": {
      return { ...state, whiteSidenav: action.value };
    }
    case "SIDENAV_COLOR": {
      return { ...state, sidenavColor: action.value };
    }
    case "TRANSPARENT_NAVBAR": {
      return { ...state, transparentNavbar: action.value };
    }
    case "FIXED_NAVBAR": {
      return { ...state, fixedNavbar: action.value };
    }
    case "OPEN_CONFIGURATOR": {
      return { ...state, openConfigurator: action.value };
    }
    case "DIRECTION": {
      return { ...state, direction: action.value };
    }
    case "LAYOUT": {
      return { ...state, layout: action.value };
    }
    case "DARKMODE": {
      return { ...state, darkMode: action.value };
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`);
    }
  }
}

// Material Dashboard 2 PRO React context provider
function MaterialUIControllerProvider({ children }) {
  const initialState = {
    miniSidenav: false,
    transparentSidenav: false,
    whiteSidenav: false,
    sidenavColor: "info",
    transparentNavbar: true,
    fixedNavbar: true,
    openConfigurator: false,
    direction: "ltr",
    layout: "dashboard",
    darkMode: false,
  };

  const [controller, dispatch] = useReducer(reducer, initialState);

  const value = useMemo(() => [controller, dispatch], [controller, dispatch]);

  return <MaterialUI.Provider value={value}>{children}</MaterialUI.Provider>;
}

// Material Dashboard 2 PRO React custom hook for using context
function useMaterialUIController() {
  const context = useContext(MaterialUI);

  if (!context) {
    throw new Error(
      "useMaterialUIController should be used inside the MaterialUIControllerProvider."
    );
  }

  return context;
}

// Typechecking props for the MaterialUIControllerProvider
MaterialUIControllerProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

// Context module functions
const setMiniSidenav = (dispatch, value) => dispatch({ type: "MINI_SIDENAV", value });
const setTransparentSidenav = (dispatch, value) => dispatch({ type: "TRANSPARENT_SIDENAV", value });
const setWhiteSidenav = (dispatch, value) => dispatch({ type: "WHITE_SIDENAV", value });
const setSidenavColor = (dispatch, value) => dispatch({ type: "SIDENAV_COLOR", value });
const setTransparentNavbar = (dispatch, value) => dispatch({ type: "TRANSPARENT_NAVBAR", value });
const setFixedNavbar = (dispatch, value) => dispatch({ type: "FIXED_NAVBAR", value });
const setOpenConfigurator = (dispatch, value) => dispatch({ type: "OPEN_CONFIGURATOR", value });
const setDirection = (dispatch, value) => dispatch({ type: "DIRECTION", value });
const setLayout = (dispatch, value) => dispatch({ type: "LAYOUT", value });
const setDarkMode = (dispatch, value) => dispatch({ type: "DARKMODE", value });

export {
  AuthContextProvider,
  MaterialUIControllerProvider,
  useMaterialUIController,
  setMiniSidenav,
  setTransparentSidenav,
  setWhiteSidenav,
  setSidenavColor,
  setTransparentNavbar,
  setFixedNavbar,
  setOpenConfigurator,
  setDirection,
  setLayout,
  setDarkMode,
};
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/category-management/edit-category/index.js

Code for file: prospera-home/team-dashboard/src/cruds/category-management/edit-category/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useEffect, useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";
import MDEditor from "components/MDEditor";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate, useParams } from "react-router-dom";

import CrudService from "services/cruds-service";

const EditCategory = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [description, setDescription] = useState("");
  const [category, setCategory] = useState({
    id: "",
    name: "",
  });
  const [error, setError] = useState({
    name: false,
    description: false,
    error: false,
    textError: "",
  });

  useEffect(() => {
    if (!id) return;
    (async () => {
      try {
        const res = await CrudService.getCategory(id);
        setCategory({
          id: res.data.id,
          name: res.data.attributes.name,
        });
        setDescription(res.data.attributes.description);
      } catch (err) {
        console.error(err);
      }
    })();
  }, [id]);

  const changeNameHandler = (e) => {
    setCategory({ ...category, name: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (category.name.trim().length < 1) {
      setError({ ...error, name: true, textError: "The category name is required" });
      return;
    }

    let descNoTags = description.replace(/(<([^>]+)>)/gi, "");
    if (descNoTags < 1) {
      setError({
        ...error,
        description: true,
        textError: "The category description is required",
      });
      return;
    }

    const categoryUpdated = {
      data: {
        type: "categories",
        id: category.id.toString(),
        attributes: {
          name: category.name,
          description,
        },
      },
    };

    try {
      await CrudService.updateCategory(categoryUpdated, categoryUpdated.data.id);
      navigate("/examples-api/category-management", {
        state: { value: true, text: "The category was sucesfully updated" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setError({ ...category, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar breadcrumbTitle={category.name}/>
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Edit Category
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the category.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox component="form" method="POST" onSubmit={submitHandler}>
                <MDBox display="flex" flexDirection="column" px={3} my={2}>
                  <MDBox p={1}>
                    <FormField
                      type="text"
                      label="Name"
                      name="name"
                      value={category.name}
                      onChange={changeNameHandler}
                      error={error.name}
                    />
                    {error.name && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox mt={2}>
                    <MDBox mb={1} ml={0.5} lineHeight={0} display="inline-block">
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Description&nbsp;&nbsp;
                      </MDTypography>
                    </MDBox>
                    <MDEditor value={description} onChange={setDescription} />
                    {error.description && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/category-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default EditCategory;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/category-management/new-category/index.js

Code for file: prospera-home/team-dashboard/src/cruds/category-management/new-category/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";
import MDEditor from "components/MDEditor";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate } from "react-router-dom";

import CrudService from "services/cruds-service";

const NewCategory = () => {
  const navigate = useNavigate();
  const [name, setName] = useState({
    text: "",
    error: false,
    textError: "",
  });

  const [description, setDescription] = useState("");
  const [descError, setDescError] = useState(false);

  const changeNameHandler = (e) => {
    setName({ ...name, text: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (name.text.trim().length < 1) {
      setName({ ...name, error: true, textError: "The category name is required" });
      return;
    }

    let descNoTags = description.replace(/(<([^>]+)>)/gi, "");
    if (descNoTags < 1) {
      setDescError(true);
      return;
    }

    const category = {
      data: {
        type: "categories",
        attributes: {
          name: name.text,
          description,
        },
      },
    };

    try {
      await CrudService.createCategory(category);
      navigate("/examples-api/category-management", {
        state: { value: true, text: "The category was sucesfully created" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setName({ ...name, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New Category
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the category.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox component="form" method="POST" onSubmit={submitHandler}>
                <MDBox display="flex" flexDirection="column" px={3} my={2}>
                  <MDBox p={1}>
                    <FormField
                      type="text"
                      label="Name"
                      name="name"
                      value={name.text}
                      onChange={changeNameHandler}
                      error={name.error}
                    />
                    {name.error && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {name.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox mt={2}>
                    <MDBox mb={1} ml={0.5} lineHeight={0} display="inline-block">
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Description&nbsp;&nbsp;
                      </MDTypography>
                    </MDBox>
                    <MDEditor value={description} onChange={setDescription} />
                    {descError && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        The category description is required
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/category-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default NewCategory;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/category-management/index.js

Code for file: prospera-home/team-dashboard/src/cruds/category-management/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";

// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import DataTable from "examples/Tables/DataTable";
import MDButton from "components/MDButton";
import MDAlert from "components/MDAlert";
import { Tooltip, IconButton } from "@mui/material";

import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";

import CrudService from "services/cruds-service";
import HTMLReactParser from "html-react-parser";
import { AbilityContext } from "Can";
import { useAbility } from "@casl/react";

function CategoryManagement() {
  let { state } = useLocation();
  const ability = useAbility(AbilityContext);
  const [data, setData] = useState([]);
  const [tableData, setTableData] = useState([]);
  const [notification, setNotification] = useState({
    value: false,
    text: "",
  });

  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      const response = await CrudService.getCategories();
      setData(response.data);
    })();
  }, []);

  useEffect(() => {
    if (!state) return;
    setNotification({
      value: state.value,
      text: state.text,
    });
  }, [state]);

  useEffect(() => {
    setTableData(getRows(data));
  }, [data]);

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({
          value: false,
          text: "",
        });
      }, 5000);
    }
  }, [notification]);

  const clickAddHandler = () => {
    navigate("/category-management/new-category");
  };

  const clickEditHandler = (id) => {
    navigate(`/category-management/edit-category/${id}`);
  };

  const clickDeleteHandler = async (e, id) => {
    try {
      if (!confirm("Are you sure you want to delete this category?")) {
        e.nativeEvent.stopImmediatePropagation();
      } else {
        await CrudService.deleteCategory(id);
        // the delete does not send a response
        // so I need to get again the categories to set it and this way the table gets updated -> it goes to the useEffect with data dependecy
        const response = await CrudService.getCategories();
        setData(response.data);
        setNotification({
          value: true,
          text: "The category has been successfully deleted",
        });
      }
    } catch (err) {
      // it sends error is the category is associated with an item
      console.error(err);
      if (err.hasOwnProperty("errors")) {
        setNotification({
          value: true,
          text: err.errors[0].title,
        });
      }
      return null;
    }
  };

  const getRows = (info) => {
    let updatedInfo = info.map((row) => {
      return {
        type: "categories",
        id: row.id,
        name: row.attributes.name,
        description: row.attributes.description,
        created_at: row.attributes.created_at,
      };
    });
    return updatedInfo;
  };

  const dataTableData = {
    columns: [
      { Header: "name", accessor: "name", width: "25%" },
      {
        Header: "description",
        accessor: "description",
        width: "25%",
        Cell: ({ cell: { value } }) => HTMLReactParser(value),
      },
      { Header: "created at", accessor: "created_at", width: "25%" },
      {
        Header: "actions",
        disableSortBy: true,
        accessor: "",
        Cell: (info) => {
          return (
            <MDBox display="flex" alignItems="center">
              {ability.can("delete", "categories") && (
                <Tooltip title="Delete Category">
                  <IconButton onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}>
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              )}
              {ability.can("edit", "categories") && (
                <Tooltip title="Edit Category">
                  <IconButton onClick={() => clickEditHandler(info.cell.row.original.id)}>
                    <EditIcon />
                  </IconButton>
                </Tooltip>
              )}
            </MDBox>
          );
        },
      },
    ],

    rows: tableData,
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      {notification.value && (
        <MDAlert color="info" my="20px">
          <MDTypography variant="body2" color="white">
            {notification.text}
          </MDTypography>
        </MDAlert>
      )}
      <MDBox pt={6} pb={3}>
        <MDBox mb={3}>
          <Card>
            <MDBox p={3} lineHeight={1} display="flex" justifyContent="space-between">
              <MDTypography variant="h5" fontWeight="medium">
                Category Management
              </MDTypography>
              {ability.can("create", "categories") && (
                <MDButton
                  variant="gradient"
                  color="dark"
                  size="small"
                  type="submit"
                  onClick={clickAddHandler}
                >
                  + Add Category
                </MDButton>
              )}
            </MDBox>
            <DataTable table={dataTableData} />
          </Card>
        </MDBox>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
}

export default CategoryManagement;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/item-management/edit-item/index.js

Code for file: prospera-home/team-dashboard/src/cruds/item-management/edit-item/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useEffect, useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";
import { FormControl, FormLabel, InputLabel } from "@mui/material";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDAvatar from "components/MDAvatar";
import MDEditor from "components/MDEditor";
import {
  Autocomplete,
  RadioGroup,
  FormControlLabel,
  Radio,
  Switch,
  TextField,
} from "@mui/material";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate, useParams } from "react-router-dom";

import CrudService from "services/cruds-service";

const createDateFormat = (date) => {
  const month = date.getMonth() + 1;
  const day = date.getDate();
  let newDate;
  if (month > 9 && day > 9) {
    newDate = `${date.getFullYear()}-${month}-${day}`;
  }
  if (month > 9 && day < 9) {
    newDate = `${date.getFullYear()}-${month}-0${day}`;
  }
  if (month < 9 && day > 9) {
    newDate = `${date.getFullYear()}-0${month}-${day}`;
  }
  if (month < 9 && day < 9) {
    newDate = `${date.getFullYear()}-0${month}-0${day}`;
  }
  return newDate;
};

const EditItem = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [tags, setTags] = useState([]);
  const [chosenTags, setChosenTags] = useState([]);
  const [image, setImage] = useState("");
  const [fileState, setFileState] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [description, setDescription] = useState("");
  const today = new Date();
  const initialDate = createDateFormat(today);
  const [value, setValue] = useState({});
  const [item, setItem] = useState({
    id: "",
    name: "",
    excerpt: "",
    homepage: false,
    category: "",
    date: initialDate,
    status: "",
  });

  const [error, setError] = useState({
    name: false,
    excerpt: false,
    homepage: false,
    category: false,
    tags: false,
    date: false,
    status: false,
    description: false,
    image: false,
    error: false,
    textError: "",
  });

  useEffect(() => {
    (async () => {
      try {
        const response = await CrudService.getCategories();
        setCategories(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
      try {
        const response = await CrudService.getTags();
        setTags(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, []);

  useEffect(() => {
    if (!id) return;
    (async () => {
      try {
        const response = await CrudService.getItem(id);
        const resData = response.data.attributes;
        setItem({
          id: response.data.id,
          name: resData.name,
          excerpt: resData.excerpt,
          homepage: resData.is_on_homepage,
          date: resData.date_at,
          status: resData.status,
        });
        setDescription(resData.description);
        setImage(resData.image);
        const categoryData = await CrudService.getCategory(resData.category_id);
        const category = categoryData.data;
        setValue(category);
        response.included.map((res) => {
          if (res.type === "categories") {
            setItem((prevState) => {
              return { ...prevState, category: res.id };
            });
          }
          if (res.type === "tags") {
            setChosenTags((prevState) => [...prevState, res]);
          }
        });
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, [id]);

  const changeHandler = (e) => {
    setItem({
      ...item,
      [e.target.name]: e.target.value,
    });
  };

  const changeImageHandler = (e) => {
    const formData = new FormData();
    formData.append("attachment", e.target.files[0]);
    setFileState(formData);
    setImageUrl(URL.createObjectURL(e.target.files[0]));
    setImage(e.target.files[0]);
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (item.name.trim().length === 0) {
      setError({
        name: true,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        image: false,
        description: false,
        textError: "The name is required",
      });
      return;
    }

    if (item.excerpt.trim().length === 0) {
      setError({
        name: false,
        excerpt: true,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        description: false,
        image: false,
        textError: "The excerpt is required",
      });
      return;
    }

    let descNoTags = description.replace(/(<([^>]+)>)/gi, "");
    if (descNoTags.length < 1) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        image: false,
        description: true,
        textError: "The description is required",
      });
      return;
    }

    if (value.id == null || value.id === "") {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: true,
        tags: false,
        date: false,
        status: false,
        description: false,
        image: false,
        textError: "The category is required",
      });
      return;
    }

    if (chosenTags.length < 1) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: true,
        date: false,
        status: false,
        description: false,
        image: false,
        textError: "The tags are required",
      });
      return;
    }

    if (item.status.length < 1) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: true,
        description: false,
        image: false,
        textError: "The status are required",
      });
      return;
    }

    if (!image) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        description: false,
        image: true,
        textError: "The image is required",
      });
      return;
    }

    try {
      const { url } = fileState ? await CrudService.itemImageUpload(fileState, id) : image;

      const newItem = {
        data: {
          type: "items",
          id: item.id.toString(),
          attributes: {
            name: item.name,
            excerpt: item.excerpt,
            description,
            is_on_homepage: item.homepage,
            image: fileState ? `${process.env.REACT_APP_IMAGES}${url}` : image,
            status: item.status,
            date_at: item.date,
          },
          relationships: {
            category: {
              data: {
                type: "categories",
                id: value.id ? value.id.toString() : item.category.toString(),
              },
            },
            user: {
              data: {
                type: "users",
                id: "1",
              },
            },
            tags: {
              data: chosenTags.map((tag) => {
                return { type: "tags", id: tag.id };
              }),
            },
          },
        },
      };
      try {
        const res = await CrudService.updateItem(newItem, newItem.data.id);
        navigate("/examples-api/item-management", {
          state: { value: true, text: "The item was sucesfully created" },
        });
      } catch (err) {
        if (err.hasOwnProperty("errors")) {
          setError({ ...error, error: true, textError: err.errors[0].detail });
        }
        return null;
      }
    } catch (err) {
      setError({ ...error, error: true, textError: err.message });
      return null;
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar breadcrumbTitle={item.name} />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New Item
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the item.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox
                component="form"
                method="POST"
                onSubmit={submitHandler}
                encType="multipart/form-data"
              >
                <MDBox display="flex" flexDirection="column" px={3} my={4}>
                  <MDBox display="flex" flexDirection="column">
                    <FormField
                      label="Name"
                      placeholder="Alec"
                      name="name"
                      value={item.name}
                      onChange={changeHandler}
                      error={error.name}
                    />
                    {error.name && (
                      <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox display="flex" flexDirection="column" mt={2}>
                    <FormField
                      label="Excerpt"
                      placeholder="excerpt"
                      name="excerpt"
                      value={item.excerpt}
                      onChange={changeHandler}
                      error={error.excerpt}
                    />
                    {error.excerpt && (
                      <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>

                  <MDBox mt={2}>
                    <MDBox mb={1} ml={0.5} lineHeight={0} display="inline-block">
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Description&nbsp;&nbsp;
                      </MDTypography>
                    </MDBox>
                    <MDEditor value={description} onChange={setDescription} />
                    {error.description && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>

                  <MDBox display="flex" flexDirection="column" fullWidth>
                    <MDBox display="flex" flexDirection="column" fullWidth marginTop="2rem">
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Category
                      </MDTypography>
                      <Autocomplete
                        defaultValue={null}
                        options={categories}
                        getOptionLabel={(option) => {
                          if (option.data) {
                            if (option.data.attributes) {
                              if (option.data.attributes.name) return option.data.attributes.name;
                            }
                          } else {
                            if (option.attributes) {
                              if (option.attributes.name) return option.attributes.name;
                            }
                          }
                          return "";
                        }}
                        value={value ?? null}
                        onChange={(event, newValue) => {
                          setValue(newValue);
                        }}
                        renderInput={(params) => (
                          <FormField {...params} label="" InputLabelProps={{ shrink: true }} />
                        )}
                      />
                      {error.category && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>
                  </MDBox>

                  <MDBox display="flex" flexDirection="column" fullWidth marginTop="2rem">
                    <MDBox display="flex" flexDirection="column" fullWidth>
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Tags
                      </MDTypography>
                      <Autocomplete
                        multiple
                        value={tags.filter((tag) => {
                          if (chosenTags.find((choice) => choice.id === tag.id)) {
                            return <span style={{ backgroundColor: tag.color }}>{tag}</span>;
                          }
                        })}
                        getOptionLabel={(option) => option.attributes.name}
                        options={tags}
                        filterSelectedOptions={true}
                        onChange={(e, value) => {
                          setChosenTags(value);
                        }}
                        renderInput={(params) => <MDInput {...params} variant="standard" />}
                      />
                      {error.tags && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>
                  </MDBox>

                  <MDBox display="flex" flexDirection="column">
                    <FormControl>
                      <FormLabel
                        id="demo-radio-buttons-group-label"
                        sx={{ fontSize: "0.875rem", fontWeight: "400", mt: "24px" }}
                      >
                        Status
                      </FormLabel>
                      <RadioGroup
                        aria-labelledby="demo-radio-buttons-group-label"
                        value={item.status}
                        name="radio-buttons-group"
                        onChange={(e) => setItem({ ...item, status: e.target.value })}
                      >
                        <FormControlLabel
                          sx={{ fontSize: "0.875rem", fontWeight: "400" }}
                          value="published"
                          control={<Radio />}
                          label="Published"
                          checked={item.status === "published"}
                        />
                        <FormControlLabel
                          sx={{ fontSize: "0.875rem", fontWeight: "400" }}
                          value="draft"
                          control={<Radio />}
                          label="Draft"
                          checked={item.status === "draft"}
                        />
                        <FormControlLabel
                          sx={{ fontSize: "0.875rem", fontWeight: "400" }}
                          value="archive"
                          control={<Radio />}
                          label="Archive"
                          checked={item.status === "archive"}
                        />
                      </RadioGroup>
                    </FormControl>
                    {error.status && (
                      <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>

                  <MDBox display="flex" alignItems="center" mb={3} ml={-1.5}>
                    <MDBox mt={0.5}>
                      <Switch
                        checked={item.homepage}
                        onChange={(e) => setItem({ ...item, homepage: e.target.checked })}
                        name="homepage"
                      />
                    </MDBox>
                    <MDBox width="80%" ml={0.5}>
                      <MDTypography variant="button" fontWeight="regular" color="text">
                        Homepage
                      </MDTypography>
                    </MDBox>
                  </MDBox>

                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DesktopDatePicker
                      label="Date"
                      inputFormat="MM/dd/yyyy"
                      name="date"
                      value={item.date}
                      onChange={(newValue) => {
                        const newDate = createDateFormat(newValue);
                        setItem({ ...item, date: newDate });
                      }}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  </LocalizationProvider>

                  <MDBox
                    display="flex"
                    flexDirection="row"
                    alignItems="center"
                    justifyContent="space-between"
                    fullWidth
                  >
                    <MDBox mt={2} display="flex" flexDirection="column">
                      <InputLabel id="demo-simple-select-label">Image</InputLabel>
                      <MDInput
                        fullWidth
                        type="file"
                        name="attachment"
                        onChange={changeImageHandler}
                        id="file-input"
                        accept="image/*"
                        sx={{ mt: "16px" }}
                      ></MDInput>
                      {error.image && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>

                    {image && (
                      <MDBox ml={4} mt={2}>
                        <MDAvatar
                          src={imageUrl ?? image}
                          alt="profile-image"
                          size="xxl"
                          shadow="sm"
                        />
                      </MDBox>
                    )}
                  </MDBox>
                  {error.error && (
                    <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                      {error.textError}
                    </MDTypography>
                  )}
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/item-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default EditItem;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/item-management/new-item/index.js

Code for file: prospera-home/team-dashboard/src/cruds/item-management/new-item/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useEffect, useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";
import { FormControl, FormLabel, InputLabel } from "@mui/material";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDAvatar from "components/MDAvatar";
import MDEditor from "components/MDEditor";
import {
  Autocomplete,
  RadioGroup,
  FormControlLabel,
  Radio,
  Switch,
  TextField,
} from "@mui/material";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate } from "react-router-dom";

import CrudService from "services/cruds-service";

const createDateFormat = (date) => {
  const month = date.getMonth() + 1;
  const day = date.getDate();
  let newDate;
  if (month > 9 && day > 9) {
    newDate = `${date.getFullYear()}-${month}-${day}`;
  }
  if (month > 9 && day < 9) {
    newDate = `${date.getFullYear()}-${month}-0${day}`;
  }
  if (month < 9 && day > 9) {
    newDate = `${date.getFullYear()}-0${month}-${day}`;
  }
  if (month < 9 && day < 9) {
    newDate = `${date.getFullYear()}-0${month}-0${day}`;
  }
  return newDate;
};

const NewItem = () => {
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [tags, setTags] = useState([]);
  const [chosenTags, setChosenTags] = useState([]);
  const [image, setImage] = useState("");
  const [fileState, setFileState] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [description, setDescription] = useState("");
  const [value, setValue] = useState("");
  const today = new Date();
  const initialDate = createDateFormat(today);
  const [item, setItem] = useState({
    name: "",
    excerpt: "",
    homepage: false,
    category: "",
    date: initialDate,
    status: "",
  });

  const [error, setError] = useState({
    name: false,
    excerpt: false,
    homepage: false,
    category: false,
    tags: false,
    date: false,
    status: false,
    description: false,
    image: false,
    error: false,
    textError: "",
  });

  useEffect(() => {
    (async () => {
      try {
        const response = await CrudService.getCategories();
        setCategories(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
      try {
        const response = await CrudService.getTags();
        setTags(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, []);

  const changeHandler = (e) => {
    setItem({
      ...item,
      [e.target.name]: e.target.value,
    });
  };

  const changeImageHandler = (e) => {
    const formData = new FormData();
    formData.append("attachment", e.target.files[0]);
    setFileState(formData);
    setImageUrl(URL.createObjectURL(e.target.files[0]));
    setImage(e.target.files[0]);
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (item.name.trim().length === 0) {
      setError({
        name: true,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        image: false,
        description: false,
        textError: "The name is required",
      });
      return;
    }

    if (item.excerpt.trim().length === 0) {
      setError({
        name: false,
        excerpt: true,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        description: false,
        image: false,
        textError: "The excerpt is required",
      });
      return;
    }

    let descNoTags = description.replace(/(<([^>]+)>)/gi, "");
    if (descNoTags.length === 0) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        image: false,
        description: true,
        textError: "The description is required",
      });
      return;
    }

    if (value.id == null || value === "") {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: true,
        tags: false,
        date: false,
        status: false,
        description: false,
        image: false,
        textError: "The category is required",
      });
      return;
    }

    if (chosenTags.length < 1) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: true,
        date: false,
        status: false,
        description: false,
        image: false,
        textError: "The tags are required",
      });
      return;
    }

    if (item.status.length < 1) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: true,
        description: false,
        image: false,
        textError: "The status are required",
      });
      return;
    }

    if (!image) {
      setError({
        name: false,
        excerpt: false,
        homepage: false,
        category: false,
        tags: false,
        date: false,
        status: false,
        description: false,
        image: true,
        textError: "The image is required",
      });
      return;
    }

    const newItem = {
      data: {
        type: "items",
        attributes: {
          name: item.name,
          excerpt: item.excerpt,
          description,
          is_on_homepage: item.homepage,
          image: null,
          status: item.status,
          date_at: item.date,
        },
        relationships: {
          category: {
            data: {
              type: "categories",
              id: value.id.toString(),
            },
          },
          user: {
            data: {
              type: "users",
              id: "1",
            },
          },
          tags: {
            data: chosenTags.map((tag) => {
              return { type: "tags", id: tag.id };
            }),
          },
        },
      },
    };

    try {
      const res = await CrudService.createItem(newItem);
      const id = res.data.id;
      // issue for new item and user: i can't add the image only after the user/item is created because i need the id
      // if the image throws an error the user/item is still created and is saved with no image
      try {
        const { url } = await CrudService.itemImageUpload(fileState, id);
        const itemData = {
          data: {
            type: "items",
            id: id,
            attributes: {
              image: `${process.env.REACT_APP_IMAGES}${url}`,
            },
          },
        };
        try {
          await CrudService.updateItem(itemData, id);
        } catch (err) {
          console.error(err);
        }
      } catch (err) {
        console.error(err);
      }
      navigate("/examples-api/item-management", {
        state: { value: true, text: "The item was sucesfully created" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setError({ ...error, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New Item
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the item.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox
                component="form"
                method="POST"
                onSubmit={submitHandler}
                encType="multipart/form-data"
              >
                <MDBox display="flex" flexDirection="column" px={3} my={4}>
                  <MDBox display="flex" flexDirection="column">
                    <FormField
                      label="Name"
                      placeholder="Alec"
                      name="name"
                      value={item.name}
                      onChange={changeHandler}
                      error={error.name}
                    />
                    {error.name && (
                      <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox display="flex" flexDirection="column" mt={2}>
                    <FormField
                      label="Excerpt"
                      placeholder="excerpt"
                      name="excerpt"
                      value={item.excerpt}
                      onChange={changeHandler}
                      error={error.excerpt}
                    />
                    {error.excerpt && (
                      <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>

                  <MDBox mt={2}>
                    <MDBox mb={1} ml={0.5} lineHeight={0} display="inline-block">
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Description&nbsp;&nbsp;
                      </MDTypography>
                    </MDBox>
                    <MDEditor value={description} onChange={setDescription} />
                    {error.description && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>

                  <MDBox display="flex" flexDirection="column" fullWidth>
                    <MDBox display="flex" flexDirection="column" fullWidth marginTop="2rem">
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Category
                      </MDTypography>
                      <Autocomplete
                        defaultValue=""
                        options={categories}
                        getOptionLabel={(option) => (option ? option.attributes.name : "")}
                        value={value}
                        onChange={(event, newValue) => {
                          setValue(newValue);
                        }}
                        renderInput={(params) => (
                          <FormField {...params} label="" InputLabelProps={{ shrink: true }} />
                        )}
                      />
                      {error.category && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>
                  </MDBox>

                  <MDBox display="flex" flexDirection="column" fullWidth marginTop="2rem">
                    <MDBox display="flex" flexDirection="column" fullWidth>
                      <MDTypography
                        component="label"
                        variant="button"
                        fontWeight="regular"
                        color="text"
                      >
                        Tags
                      </MDTypography>
                      <Autocomplete
                        multiple
                        defaultValue={[]}
                        getOptionLabel={(option) => option.attributes.name}
                        options={tags}
                        filterSelectedOptions={true}
                        onChange={(e, value) => {
                          setChosenTags(value);
                        }}
                        renderInput={(params) => <MDInput {...params} variant="standard" />}
                      />
                      {error.tags && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pt={1}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>
                  </MDBox>

                  <MDBox display="flex" flexDirection="column">
                    <FormControl>
                      <FormLabel
                        id="demo-radio-buttons-group-label"
                        sx={{ fontSize: "0.875rem", fontWeight: "400", mt: "24px" }}
                      >
                        Status
                      </FormLabel>
                      <RadioGroup
                        aria-labelledby="demo-radio-buttons-group-label"
                        value={item.status}
                        name="radio-buttons-group"
                        onChange={(e) => setItem({ ...item, status: e.target.value })}
                      >
                        <FormControlLabel
                          sx={{ fontSize: "0.875rem", fontWeight: "400" }}
                          value="published"
                          control={<Radio />}
                          label="Published"
                        />
                        <FormControlLabel
                          sx={{ fontSize: "0.875rem", fontWeight: "400" }}
                          value="draft"
                          control={<Radio />}
                          label="Draft"
                        />
                        <FormControlLabel
                          sx={{ fontSize: "0.875rem", fontWeight: "400" }}
                          value="archive"
                          control={<Radio />}
                          label="Archive"
                        />
                      </RadioGroup>
                    </FormControl>
                    {error.status && (
                      <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                        {error.textError}
                      </MDTypography>
                    )}
                  </MDBox>

                  <MDBox display="flex" alignItems="center" mb={3} ml={-1.5}>
                    <MDBox mt={0.5}>
                      <Switch
                        checked={item.homepage}
                        onChange={() => setItem({ ...item, homepage: !item.homepage })}
                        name="homepage"
                      />
                    </MDBox>
                    <MDBox width="80%" ml={0.5}>
                      <MDTypography variant="button" fontWeight="regular" color="text">
                        Homepage
                      </MDTypography>
                    </MDBox>
                  </MDBox>

                  <LocalizationProvider dateAdapter={AdapterDateFns}>
                    <DesktopDatePicker
                      label="Date"
                      inputFormat="MM/dd/yyyy"
                      name="date"
                      value={item.date}
                      onChange={(newValue) => {
                        const newDate = createDateFormat(newValue);
                        setItem({ ...item, date: newDate });
                      }}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  </LocalizationProvider>

                  <MDBox
                    display="flex"
                    flexDirection="row"
                    alignItems="center"
                    justifyContent="space-between"
                    fullWidth
                  >
                    <MDBox mt={2} display="flex" flexDirection="column">
                      <InputLabel id="demo-simple-select-label">Image</InputLabel>
                      <MDInput
                        fullWidth
                        type="file"
                        name="attachment"
                        onChange={changeImageHandler}
                        id="file-input"
                        accept="image/*"
                        sx={{ mt: "16px" }}
                      ></MDInput>
                      {error.image && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>

                    {imageUrl && (
                      <MDBox ml={4} mt={2}>
                        <MDAvatar src={imageUrl} alt="profile-image" size="xxl" shadow="sm" />
                      </MDBox>
                    )}
                  </MDBox>
                  {error.error && (
                    <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                      {error.textError}
                    </MDTypography>
                  )}
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/item-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default NewItem;

```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/item-management/index.js

Code for file: prospera-home/team-dashboard/src/cruds/item-management/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect } from "react";

// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import DataTable from "examples/Tables/DataTable";
import MDButton from "components/MDButton";
import MDAvatar from "components/MDAvatar";
import MDAlert from "components/MDAlert";
import { Tooltip, IconButton } from "@mui/material";

import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";

import CrudService from "services/cruds-service";
import HttpService from "services/http.service";
import { useNavigate } from "react-router-dom";
import { AbilityContext } from "Can";
import { useAbility } from "@casl/react";

function ItemManagement() {
  const [items, setItems] = useState([]);
  const ability = useAbility(AbilityContext);
  const [updated, setUpdated] = useState(false);
  const [tableData, setTableData] = useState([]);
  const [notification, setNotification] = useState({
    value: false,
    text: "",
  });

  const navigate = useNavigate();

  const getCategory = async (item) => {
    try {
      return await HttpService.get(item.relationships.category.links.related);
    } catch (err) {
      // throw new Error(err);
      console.error(err);
      return null;
    }
  };

  const getTags = async (item) => {
    try {
      return await HttpService.get(item.relationships.tags.links.related);
    } catch (err) {
      // throw new error
      console.error(err);
      return null;
    }
  };

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({
          value: false,
          text: "",
        });
      }, 5000);
    }
  }, [notification]);

  const clickAddHandler = () => {
    navigate("/item-management/new-item");
  };

  const clickEditHandler = (id) => {
    navigate(`/item-management/edit-item/${id}`);
  };

  const clickDeleteHandler = async (e, id) => {
    try {
      if (!confirm("Are you sure you want to delete this item?")) {
        e.nativeEvent.stopImmediatePropagation();
      } else {
        await CrudService.deleteItem(id);
        // the delete does not send a response
        // so I need to get again the tags to set it and this way the table gets updated -> it goes to the useEffect with data dependecy
        setUpdated((prevState) => !prevState);
        setNotification({
          value: true,
          text: "The item has been successfully deleted",
        });
      }
    } catch (err) {
      // it sends error is the category is associated with an item
      console.error(err);
      if (err.hasOwnProperty("errors")) {
        setNotification({
          value: true,
          text: err.errors[0].title,
        });
      }
      return null;
    }
  };

  useEffect(() => {
    (async () => {
      const response = await CrudService.getItems();
      const myData = response.data;

      const categories = await Promise.all(myData.map((item) => getCategory(item)));
      const tags = await Promise.all(myData.map((item) => getTags(item)));

      const toSetTags = [];
      for (let i = 0; i < tags.length; i++) {
        const element = tags[i].data.map((tag) => {
          return {
            key: `${i}-${tag.id}`,
            name: tag.attributes.name,
            color: tag.attributes.color,
          };
        });
        toSetTags.push(element);
      }

      let newItems = new Array();
      for (let i = 0; i < myData.length; i++) {
        // if null it means it throwed an error so should jump it
        if (categories[i] !== null && toSetTags[i] !== null) {
          const item = {
            id: myData[i].id,
            category: categories[i].data.attributes.name,
            image: myData[i].attributes.image,
            name: myData[i].attributes.name,
            created_at: myData[i].attributes.created_at,
            tags: toSetTags[i],
          };
          newItems.push(item);
        }
      }

      setItems(newItems);
      setTableData(newItems);
    })();
  }, [updated]);

  const dataTableData = {
    columns: [
      { Header: "name", accessor: "name", width: "15%" },
      {
        Header: "image",
        accessor: "image",
        width: "15%",
        disableSortBy: true,
        Cell: ({ cell: { value } }) => {
          return (
            <>
              <MDAvatar src={value} alt="profile-image" size="xl" shadow="sm" />
            </>
          );
        },
      },
      { Header: "category", accessor: "category", width: "15%" },
      {
        Header: "tags",
        accessor: "tags",
        width: "20%",
        Cell: ({ cell: { value } }) => {
          return (
            <>
              {value.map((tag) => {
                return (
                  <MDBox
                    display="flex"
                    flexDirection="row"
                    flexWrap={true}
                    sx={{ backgroundColor: tag.color, borderRadius: 16 }}
                    px={2}
                    mt={0.5}
                    py={0.5}
                    key={tag.key}
                  >
                    <MDTypography variant="caption" color="white" width="100%" textAlign="center">
                      {tag.name}
                    </MDTypography>
                  </MDBox>
                );
              })}
            </>
          );
        },
      },
      { Header: "created at", accessor: "created_at", width: "15%" },
      {
        Header: "actions",
        disableSortBy: true,
        accessor: "",
        Cell: (info) => {
          return (
            <MDBox display="flex" alignItems="center">
              {ability.can("delete", "items") && (
                <Tooltip
                  title="Delete Item"
                  onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}
                >
                  <IconButton>
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              )}
              {ability.can("edit", "items") && (
                <Tooltip
                  title="Edit Item"
                  onClick={() => clickEditHandler(info.cell.row.original.id)}
                >
                  <IconButton>
                    <EditIcon />
                  </IconButton>
                </Tooltip>
              )}
            </MDBox>
          );
        },
      },
      ,
    ],

    rows: tableData,
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      {notification.value && (
        <MDAlert color="info" my="20px">
          <MDTypography variant="body2" color="white">
            {notification.text}
          </MDTypography>
        </MDAlert>
      )}
      <MDBox pt={6} pb={3}>
        <MDBox mb={3}>
          <Card>
            <MDBox p={3} lineHeight={1} display="flex" justifyContent="space-between">
              <MDTypography variant="h5" fontWeight="medium">
                Item Management
              </MDTypography>
              {ability.can("create", "items") && (
                <MDButton
                  variant="gradient"
                  color="dark"
                  size="small"
                  type="submit"
                  onClick={clickAddHandler}
                >
                  + Add Item
                </MDButton>
              )}
            </MDBox>
            <DataTable table={dataTableData} />
          </Card>
        </MDBox>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
}

export default ItemManagement;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/role-managament/edit-role/index.js

Code for file: prospera-home/team-dashboard/src/cruds/role-managament/edit-role/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate, useParams } from "react-router-dom";

import CrudService from "services/cruds-service";
import { OneKPlusOutlined } from "@mui/icons-material";

const EditRole = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [name, setName] = useState({
    id: "",
    text: "",
    error: false,
    textError: "",
  });

  useEffect(() => {
    if (!id) return;
    (async () => {
      try {
        const res = await CrudService.getRole(id);
        setName({
          id: res.data.id,
          text: res.data.attributes.name,
        });
      } catch (err) {
        console.error(err);
      }
    })();
  }, [id]);

  const changeNameHandler = (e) => {
    setName({ ...name, text: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (name.text.trim().length < 1) {
      setName({ ...name, error: true, textError: "The role name is required" });
      return;
    }

    const role = {
      data: {
        type: "roles",
        id: name.id.toString(),
        attributes: {
          name: name.text,
        },
      },
    };

    try {
      await CrudService.updateRole(role, role.data.id);
      navigate("/examples-api/role-management", {
        state: { value: true, text: "The role was sucesfully udpated" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setName({ ...name, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar breadcrumbTitle={name.text}/>
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Edit Role
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the role.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox component="form" method="POST" onSubmit={submitHandler}>
                <MDBox display="flex" flexDirection="column" px={3} my={4}>
                  <MDBox p={1}>
                    <FormField
                      type="text"
                      label="Name"
                      name="name"
                      value={name.text}
                      onChange={changeNameHandler}
                      error={name.error}
                    />
                    {name.error && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {name.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox ml="auto" mt={2} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/role-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default EditRole;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/role-managament/new-role/index.js

Code for file: prospera-home/team-dashboard/src/cruds/role-managament/new-role/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate } from "react-router-dom";

import CrudService from "services/cruds-service";

const NewRole = () => {
  const navigate = useNavigate();
  const [name, setName] = useState({
    text: "",
    error: false,
    textError: "",
  });

  const changeNameHandler = (e) => {
    setName({ ...name, text: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (name.text.trim().length < 1) {
      setName({ ...name, error: true, textError: "The role name is required" }); 
      return;
    }

    const role = {
      data: {
        type: "roles",
        attributes: {
          name: name.text,
        },
      },
    };

    try {
      await CrudService.createRole(role);
      navigate("/examples-api/role-management", {
        state: { value: true, text: "The role was sucesfully created" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setName({ ...name, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New Role
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the role.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox component="form" method="POST" onSubmit={submitHandler}>
                <MDBox display="flex" flexDirection="column" px={3} my={4}>
                  <MDBox p={1}>
                    <FormField
                      type="text"
                      label="Name"
                      name="name"
                      value={name.text}
                      onChange={changeNameHandler}
                      error={name.error}
                    />
                    {name.error && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {name.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox ml="auto" mt={2} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/role-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default NewRole;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/role-managament/index.js

Code for file: prospera-home/team-dashboard/src/cruds/role-managament/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDAlert from "components/MDAlert";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import DataTable from "examples/Tables/DataTable";
import MDButton from "components/MDButton";
import { Tooltip, IconButton } from "@mui/material";

import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";

import CrudService from "services/cruds-service";
import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { AbilityContext, Can } from "Can";
import { useAbility } from "@casl/react";
import getId from "services/helper-service";

function RoleManagement() {
  let { state } = useLocation();

  const navigate = useNavigate();
  const ability = useAbility(AbilityContext);
  const [data, setData] = useState([]);
  const [isDemo, setIsDemo] = useState(false);
  const [tableData, setTableData] = useState([]);
  const [notification, setNotification] = useState({
    value: false,
    text: "",
  });

  useEffect(() => {
    (async () => {
      const response = await CrudService.getRoles();
      setData(response.data);
      setIsDemo(process.env.REACT_APP_IS_DEMO === "true");
    })();
  }, []);

  useEffect(() => {
    setTableData(getRows(data));
  }, [data]);

  useEffect(() => {
    if (!state) return;
    setNotification({
      value: state.value,
      text: state.text,
    });
  }, [state]);

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({
          value: false,
          text: "",
        });
      }, 5000);
    }
  }, [notification]);

  const clickAddHandler = () => {
    navigate("/role-management/new-role");
  };

  const clickEditHandler = (id) => {
    navigate(`/role-management/edit-role/${id}`);
  };

  const clickDeleteHandler = async (e, id) => {
    try {
      if (!confirm("Are you sure you want to delete this role?")) {
        e.nativeEvent.stopImmediatePropagation();
      } else {
        await CrudService.deleteRole(id);
        // the delete does not send a response
        // so I need to get again the tags to set it and this way the table gets updated -> it goes to the useEffect with data dependecy
        const response = await CrudService.getRoles();
        setData(response.data);
        setNotification({
          value: true,
          text: "The role has been successfully deleted",
        });
      }
    } catch (err) {
      // it sends error is the category is associated with an item
      console.error(err);
      if (err.hasOwnProperty("errors")) {
        setNotification({
          value: true,
          text: err.errors[0].title,
        });
      }
      return null;
    }
  };

  const getRows = (info) => {
    let updatedInfo = info.map((row) => {
      return {
        id: row.id,
        name: row.attributes.name,
        created_at: row.attributes.created_at,
      };
    });
    return updatedInfo;
  };

  const dataTableData = {
    columns: [
      { Header: "name", accessor: "name", width: "35%" },
      { Header: "created at", accessor: "created_at", width: "35%" },
      {
        Header: "actions",
        disableSortBy: true,
        accessor: "",
        Cell: (info) => {
          return (
            <MDBox display="flex" alignItems="center">
              <Can I="delete" a="users">
                {isDemo ? (
                  getId(info.cell.row.original.id) !== 1 &&
                  getId(info.cell.row.original.id) !== 2 &&
                  getId(info.cell.row.original.id) !== 3 && (
                    <Tooltip
                      title="Delete Role"
                      onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}
                    >
                      <IconButton>
                        <DeleteIcon />
                      </IconButton>
                    </Tooltip>
                  )
                ) : (
                  <Tooltip
                    title="Delete Role"
                    onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}
                  >
                    <IconButton>
                      <DeleteIcon />
                    </IconButton>
                  </Tooltip>
                )}
              </Can>
              {ability.can("edit", "roles") && (
                <Tooltip
                  title="Edit Role"
                  onClick={() => clickEditHandler(info.cell.row.original.id)}
                >
                  <IconButton>
                    <EditIcon />
                  </IconButton>
                </Tooltip>
              )}
            </MDBox>
          );
        },
      },
      ,
    ],

    rows: tableData,
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      {notification.value && (
        <MDAlert color="info" my="20px">
          <MDTypography variant="body2" color="white">
            {notification.text}
          </MDTypography>
        </MDAlert>
      )}
      <MDBox pt={6} pb={3}>
        <MDBox mb={3}>
          <Card>
            <MDBox p={3} lineHeight={1} display="flex" justifyContent="space-between">
              <MDTypography variant="h5" fontWeight="medium">
                Role Management
              </MDTypography>
              {ability.can("create", "roles") && !isDemo && (
                <MDButton
                  variant="gradient"
                  color="dark"
                  size="small"
                  type="submit"
                  onClick={clickAddHandler}
                >
                  + Add Role
                </MDButton>
              )}
            </MDBox>
            <DataTable table={dataTableData} />
          </Card>
        </MDBox>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
}

export default RoleManagement;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/tag-management/edit-tag/index.js

Code for file: prospera-home/team-dashboard/src/cruds/tag-management/edit-tag/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";

import CrudService from "services/cruds-service";

const EditTag = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [color, setColor] = useState({ color: "#5e72e4" });
  const [name, setName] = useState({
    id: "",
    text: "",
    error: false,
    textError: "",
  });

  useEffect(() => {
    if (!id) return;
    (async () => {
      try {
        const res = await CrudService.getTag(id);
        setName({
          id: res.data.id,
          text: res.data.attributes.name,
        });
        setColor({ color: res.data.attributes.color });
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, [id]);

  const changeNameHandler = (e) => {
    setName({ ...name, text: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (name.text.trim().length < 1) {
      setName({ ...name, error: true, textError: "The tag name is required" });
      return;
    }

    const tag = {
      data: {
        type: "tags",
        id: name.id.toString(),
        attributes: {
          name: name.text,
          color: color.color,
        },
      },
    };

    try {
      await CrudService.updateTag(tag, tag.data.id);
      navigate("/examples-api/tag-management", {
        state: { value: true, text: "The tag was sucesfully created" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setName({ ...name, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar breadcrumbTitle={name.text}/>
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Edit Tag
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the tag.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox component="form" method="POST" onSubmit={submitHandler}>
                <MDBox display="flex" flexDirection="column" px={3} my={2}>
                  <MDBox p={1}>
                    <FormField
                      type="text"
                      label="Name"
                      name="name"
                      value={name.text}
                      onChange={changeNameHandler}
                      error={name.error}
                    />
                    {name.error && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {name.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox mt={2}>
                    <FormField
                      type="color"
                      label="Color"
                      name="color"
                      value={color.color}
                        onChange={(e) =>
                          setColor({
                            color: e.target.value,
                          })
                        }
                    />
                  </MDBox>
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/tag-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default EditTag;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/tag-management/new-tag/index.js

Code for file: prospera-home/team-dashboard/src/cruds/tag-management/new-tag/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState } from "react";
import { useNavigate } from "react-router-dom";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";

import CrudService from "services/cruds-service";

const NewTag = () => {
  const navigate = useNavigate();
  const [color, setColor] = useState({ color: "#5e72e4" });
  const [name, setName] = useState({
    text: "",
    error: false,
    textError: "",
  });

  const changeNameHandler = (e) => {
    setName({ ...name, text: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    if (name.text.trim().length < 1) {
      setName({ ...name, error: true, textError: "The tag name is required" });
      return;
    }

    const tag = {
      data: {
        type: "tags",
        attributes: {
          name: name.text,
          color: color.color,
        },
      },
    };

    try {
      await CrudService.createTag(tag);
      navigate("/examples-api/tag-management", {
        state: { value: true, text: "The tag was sucesfully created" },
      });
    } catch (err) {
      if (err.hasOwnProperty("errors")) {
        setName({ ...name, error: true, textError: err.errors[0].detail });
      }
      console.error(err);
      return null;
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New Tag
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the tag.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox component="form" method="POST" onSubmit={submitHandler}>
                <MDBox display="flex" flexDirection="column" px={3} my={2}>
                  <MDBox p={1}>
                    <FormField
                      type="text"
                      label="Name"
                      name="name"
                      value={name.text}
                      onChange={changeNameHandler}
                      error={name.error}
                    />
                    {name.error && (
                      <MDTypography variant="caption" color="error" fontWeight="light">
                        {name.textError}
                      </MDTypography>
                    )}
                  </MDBox>
                  <MDBox mt={2}>
                    <FormField
                      type="color"
                      label="Color"
                      name="color"
                      value={color.color}
                      onChange={(e) =>
                        setColor({
                          color: e.target.value,
                        })
                      }
                    />
                  </MDBox>
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/tag-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default NewTag;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/tag-management/index.js

Code for file: prospera-home/team-dashboard/src/cruds/tag-management/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDAlert from "components/MDAlert";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import DataTable from "examples/Tables/DataTable";
import MDButton from "components/MDButton";
import { Tooltip, IconButton } from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";

import CrudService from "services/cruds-service";
import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { AbilityContext } from "Can";
import { useAbility } from "@casl/react";

function CategoryManagement() {
  let { state } = useLocation();
  const ability = useAbility(AbilityContext);
  const [data, setData] = useState([]);
  const [tableData, setTableData] = useState([]);
  const [notification, setNotification] = useState({
    value: false,
    text: "",
  });

  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        const response = await CrudService.getTags();
        setData(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, []);

  useEffect(() => {
    setTableData(getRows(data));
  }, [data]);

  useEffect(() => {
    if (!state) return;
    setNotification({
      value: state.value,
      text: state.text,
    });
  }, [state]);

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({
          value: false,
          text: "",
        });
      }, 5000);
    }
  }, [notification]);

  const clickAddHandler = () => {
    navigate("/tag-management/new-tag");
  };

  const clickEditHandler = (id) => {
    navigate(`/tag-management/edit-tag/${id}`);
  };

  const clickDeleteHandler = async (e, id) => {
    try {
      if (!confirm("Are you sure you want to delete this tag?")) {
        e.nativeEvent.stopImmediatePropagation();
      } else {
        await CrudService.deleteTag(id);
        // the delete does not send a response
        // so I need to get again the tags to set it and this way the table gets updated -> it goes to the useEffect with data dependecy
        const response = await CrudService.getTags();
        setData(response.data);
        setNotification({
          value: true,
          text: "The tag has been successfully deleted",
        });
      }
    } catch (err) {
      // it sends error is the category is associated with an item
      console.error(err);
      if (err.hasOwnProperty("errors")) {
        setNotification({
          value: true,
          text: err.errors[0].title,
        });
      }
      return null;
    }
  };

  const getRows = (info) => {
    let updatedInfo = info.map((row) => {
      return {
        id: row.id,
        name: row.attributes.name,
        color: row.attributes.color,
        created_at: row.attributes.created_at,
      };
    });
    return updatedInfo;
  };

  const dataTableData = {
    columns: [
      { Header: "name", accessor: "name", width: "25%" },
      {
        Header: "color",
        accessor: "color",
        width: "25%",
        Cell: (info) => {
          return (
            <>
              <MDBox sx={{ backgroundColor: info.cell.row.values.color, borderRadius: 16 }} px={2}>
                <MDTypography variant="caption" color="white">
                  {info.cell.row.values.name}
                </MDTypography>
              </MDBox>
            </>
          );
        },
      },
      { Header: "created at", accessor: "created_at", width: "25%" },
      {
        Header: "actions",
        disableSortBy: true,
        accessor: "",
        Cell: (info) => {
          return (
            <MDBox display="flex" alignItems="center">
              {ability.can("delete", "tags") && (
                <Tooltip
                  title="Delete Tag"
                  onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}
                >
                  <IconButton>
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              )}
              {ability.can("edit", "tags") && (
                <Tooltip
                  title="Edit Tag"
                  onClick={() => clickEditHandler(info.cell.row.original.id)}
                >
                  <IconButton>
                    <EditIcon />
                  </IconButton>
                </Tooltip>
              )}
            </MDBox>
          );
        },
      },
    ],

    rows: tableData,
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      {notification.value && (
        <MDAlert color="info" my="20px">
          <MDTypography variant="body2" color="white">
            {notification.text}
          </MDTypography>
        </MDAlert>
      )}
      <MDBox pt={6} pb={3}>
        <MDBox mb={3}>
          <Card>
            <MDBox p={3} lineHeight={1} display="flex" justifyContent="space-between">
              <MDTypography variant="h5" fontWeight="medium">
                Tag Management
              </MDTypography>
              {ability.can("create", "tags") && (
                <MDButton
                  variant="gradient"
                  color="dark"
                  size="small"
                  type="submit"
                  onClick={clickAddHandler}
                >
                  + Add tag
                </MDButton>
              )}
            </MDBox>
            <DataTable table={dataTableData} />
          </Card>
        </MDBox>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
}

export default CategoryManagement;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-management/edit-user/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-management/edit-user/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useEffect, useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";
import { InputLabel, Autocomplete } from "@mui/material";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDAvatar from "components/MDAvatar";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate, useParams } from "react-router-dom";

import CrudService from "services/cruds-service";

const EditUser = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [roles, setRoles] = useState([]);
  const [image, setImage] = useState("");
  const [fileState, setFileState] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [user, setUser] = useState({
    id: "",
    name: "",
    email: "",
    role: "",
  });
  const [value, setValue] = useState({});

  const [error, setError] = useState({
    name: false,
    email: false,
    role: false,
    error: false,
    textError: "",
  });

  useEffect(() => {
    (async () => {
      try {
        const response = await CrudService.getRoles();
        setRoles(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, []);

  useEffect(() => {
    if (!id) return;
    (async () => {
      try {
        const response = await CrudService.getUser(id);
        const getData = response.data;
        const roleData = await CrudService.getRole(getData.relationships.roles.data[0].id);
        const role = roleData.data
        setUser({
          id: getData.id,
          name: getData.attributes.name,
          email: getData.attributes.email,
          role: getData.relationships.roles.data[0].id,
        });
        setImage(getData.attributes.profile_image);
        setValue(role);
      } catch (err) {
        console.error(err);
      }
    })();
  }, [id]);

  useEffect(() => {
    if (roles && roles.length > 0) {
      const role = roles.find((role) => role.id === user.role);
      setValue(role);
    }
  }, [roles]);

  const changeHandler = (e) => {
    setUser({
      ...user,
      [e.target.name]: e.target.value,
    });
  };

  const changeImageHandler = (e) => {
    const formData = new FormData();
    formData.append("attachment", e.target.files[0]);
    setFileState(formData);
    setImageUrl(URL.createObjectURL(e.target.files[0]));
    setImage(e.target.files[0]);
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    const mailFormat = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (user.name.trim().length === 0) {
      setError({
        email: false,
        role: false,
        name: true,
        textError: "The name cannot be empty",
      });
      return;
    }

    if (user.email.trim().length === 0 || !user.email.trim().match(mailFormat)) {
      setError({
        role: false,
        name: false,
        email: true,
        textError: "The email is not valid",
      });
      return;
    }

    if (value.id && value.id === "") {
      setError({
        name: false,
        email: false,
        role: false,
        password: false,
        confirm: false,
        role: true,
        textError: "Role is required",
      });
      return;
    }

    try {
      let { url } = fileState
        ? await CrudService.imageUpload(fileState, user.id.toString())
        : image;
      const newUser = {
        data: {
          id: user.id.toString(),
          type: "users",
          attributes: {
            name: user.name,
            email: user.email,
            profile_image: fileState ? `${process.env.REACT_APP_IMAGES}${url}` : image,
          },
          relationships: {
            roles: {
              data: [
                {
                  id: value.id ? value.id.toString() : user.role.toString(),
                  type: "roles",
                },
              ],
            },
          },
        },
      };

      try {
        const res = await CrudService.updateUser(newUser, newUser.data.id);
        navigate("/examples-api/user-management", {
          state: { value: true, text: "The user was sucesfully updated" },
        });
      } catch (err) {
        if (err.hasOwnProperty("errors")) {
          setError({ ...error, error: true, textError: err.errors[0].detail });
        }
        console.error(err);
      }
    } catch (err) {
      setError({ ...error, error: true, textError: err.message });
      return null;
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar breadcrumbTitle={user.name} />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New User
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the user.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox
                component="form"
                method="POST"
                onSubmit={submitHandler}
                encType="multipart/form-data"
              >
                <MDBox display="flex" flexDirection="column" px={3} my={4}>
                  <Grid container spacing={3}>
                    <Grid item xs={12} sm={6}>
                      <FormField
                        label="Name"
                        placeholder="Alec"
                        name="name"
                        value={user.name}
                        onChange={changeHandler}
                        error={error.name}
                      />
                      {error.name && (
                        <MDTypography variant="caption" color="error" fontWeight="light">
                          {error.textError}
                        </MDTypography>
                      )}
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <FormField
                        label="Email"
                        placeholder="example@email.com"
                        inputProps={{ type: "email" }}
                        name="email"
                        value={user.email}
                        onChange={changeHandler}
                        error={error.email}
                      />
                      {error.email && (
                        <MDTypography variant="caption" color="error" fontWeight="light">
                          {error.textError}
                        </MDTypography>
                      )}
                    </Grid>
                  </Grid>
                  <MDBox display="flex" flexDirection="column" fullWidth>
                    <MDBox display="flex" flexDirection="column" fullWidth marginTop="2rem">
                      <Autocomplete
                        defaultValue={null}
                        options={roles}
                        getOptionLabel={(option) =>
                          {
                            if (option.data) {
                              if (option.data.attributes) {
                                if (option.data.attributes.name) return option.data.attributes.name;
                              }
                            } else {
                              if (option.attributes) {
                                if (option.attributes.name) return option.attributes.name;
                              }
                            }
                            return "";
                          }
                        }
                        value={value ?? null}
                        onChange={(event, newValue) => {
                          setValue(newValue);
                        }}
                        renderInput={(params) => (
                          <FormField {...params} label="Role" InputLabelProps={{ shrink: true }} />
                        )}
                      />
                      {error.role && (
                        <MDTypography variant="caption" color="error" fontWeight="light" pl={4}>
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>
                    <MDBox
                      display="flex"
                      flexDirection="row"
                      alignItems="center"
                      justifyContent="space-between"
                      fullWidth
                    >
                      <MDBox mt={2} display="flex" flexDirection="column">
                        <InputLabel id="demo-simple-select-label">Profile Image</InputLabel>
                        <MDInput
                          fullWidth
                          type="file"
                          name="attachment"
                          onChange={changeImageHandler}
                          id="file-input"
                          accept="image/*"
                          sx={{ mt: "16px" }}
                        ></MDInput>
                      </MDBox>

                      {image && (
                        <MDBox ml={4} mt={2}>
                          <MDAvatar
                            src={imageUrl ?? image}
                            alt="profile-image"
                            size="xxl"
                            shadow="sm"
                          />
                        </MDBox>
                      )}
                    </MDBox>
                  </MDBox>
                  {error.error && (
                    <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                      {error.textError}
                    </MDTypography>
                  )}
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/user-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default EditUser;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-management/new-user/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-management/new-user/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useEffect, useState } from "react";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";
import { InputLabel, Autocomplete } from "@mui/material";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDButton from "components/MDButton";
import MDTypography from "components/MDTypography";
import MDInput from "components/MDInput";
import MDAvatar from "components/MDAvatar";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import FormField from "layouts/applications/wizard/components/FormField";
import { useNavigate } from "react-router-dom";

import CrudService from "services/cruds-service";

const NewUser = () => {
  const navigate = useNavigate();
  const [roles, setRoles] = useState([]);
  const [image, setImage] = useState("");
  const [fileState, setFileState] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [user, setUser] = useState({
    name: "",
    email: "",
    password: "",
    confirm: "",
    role: "",
  });

  const [value, setValue] = useState("");

  const [error, setError] = useState({
    name: false,
    email: false,
    password: false,
    confirm: false,
    role: false,
    error: false,
    textError: "",
  });

  useEffect(() => {
    (async () => {
      try {
        const response = await CrudService.getRoles();
        setRoles(response.data);
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, []);

  const changeHandler = (e) => {
    setUser({
      ...user,
      [e.target.name]: e.target.value,
    });
  };

  const changeImageHandler = (e) => {
    const formData = new FormData();
    formData.append("attachment", e.target.files[0]);
    setFileState(formData);
    setImageUrl(URL.createObjectURL(e.target.files[0]));
    setImage(e.target.files[0]);
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    const mailFormat = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (user.name.trim().length === 0) {
      setError({
        email: false,
        role: false,
        confirm: false,
        password: false,
        name: true,
        textError: "The name cannot be empty",
      });
      return;
    }

    if (user.email.trim().length === 0 || !user.email.trim().match(mailFormat)) {
      setError({
        role: false,
        confirm: false,
        password: false,
        name: false,
        email: true,
        textError: "The email is not valid",
      });
      return;
    }

    if (user.password.trim().length < 8) {
      setError({
        name: false,
        email: false,
        role: false,
        confirm: false,
        password: true,
        textError: "The password should have at least 8 characters",
      });
      return;
    }

    if (user.confirm.trim() !== user.password.trim()) {
      setError({
        name: false,
        email: false,
        role: false,
        password: false,
        confirm: true,
        textError: "The password and password confirmation do not match",
      });
      return;
    }

    if (value.id === "") {
      setError({
        name: false,
        email: false,
        role: false,
        password: false,
        confirm: false,
        role: true,
        textError: "Role is required",
      });
      return;
    }

    const newUser = {
      data: {
        type: "users",
        attributes: {
          name: user.name,
          email: user.email,
          password: user.password,
          password_confirmation: user.confirm,
          profile_image: null,
        },
        relationships: {
          roles: {
            data: [
              {
                id: value.id.toString(),
                type: "roles",
              },
            ],
          },
        },
      },
    };

    let res = null;
    try {
      res = await CrudService.createUser(newUser);
    } catch (err) {
      setError({ ...error, error: true, textError: err.message });
      return null;
    }
    if (res) {
      try {
        const { url } = await CrudService.imageUpload(fileState, res.data.id);
        const userData = {
          data: {
            type: "profile",
            attributes: {
              profile_image: `${process.env.REACT_APP_IMAGES}${url}`,
            },
          },
        };
        const toUpdateUser = {
          data: {
            id: res.data.id.toString(),
            type: "users",
            attributes: {
              profile_image: fileState ? `${process.env.REACT_APP_IMAGES}${url}` : null,
            },
          },
        };
        await CrudService.updateUser(toUpdateUser, res.data.id);
        navigate("/examples-api/user-management", {
          state: { value: true, text: "The user was sucesfully created" },
        });
      } catch (err) {
        if (err.hasOwnProperty("errors")) {
          setError({ ...error, error: true, textError: err.errors[0].detail });
        }
        return null;
      }
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox mt={5} mb={9}>
        <Grid container justifyContent="center">
          <Grid item xs={12} lg={8}>
            <MDBox mt={6} mb={8} textAlign="center">
              <MDBox mb={1}>
                <MDTypography variant="h3" fontWeight="bold">
                  Add New User
                </MDTypography>
              </MDBox>
              <MDTypography variant="h5" fontWeight="regular" color="secondary">
                This information will describe more about the user.
              </MDTypography>
            </MDBox>
            <Card>
              <MDBox
                component="form"
                method="POST"
                onSubmit={submitHandler}
                encType="multipart/form-data"
              >
                <MDBox display="flex" flexDirection="column" px={3} my={4}>
                  <Grid container spacing={3}>
                    <Grid item xs={12} sm={6}>
                      <FormField
                        label="Name"
                        placeholder="Alec"
                        name="name"
                        value={user.name}
                        onChange={changeHandler}
                        error={error.name}
                        inputProps={{
                          autoComplete: "name",
                          form: {
                            autoComplete: "off",
                          },
                        }}
                      />
                      {error.name && (
                        <MDTypography variant="caption" color="error" fontWeight="light">
                          {error.textError}
                        </MDTypography>
                      )}
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <FormField
                        label="Email"
                        placeholder="example@email.com"
                        inputProps={{
                          type: "email",
                          autoComplete: "email",
                          form: {
                            autoComplete: "off",
                          },
                        }}
                        name="email"
                        value={user.email}
                        onChange={changeHandler}
                        error={error.email}
                      />
                      {error.email && (
                        <MDTypography variant="caption" color="error" fontWeight="light">
                          {error.textError}
                        </MDTypography>
                      )}
                    </Grid>
                  </Grid>
                  <Grid container spacing={3} mt={4}>
                    <Grid item xs={12} sm={6}>
                      <MDInput
                        fullWidth
                        label="Current Password"
                        inputProps={{ type: "password", autoComplete: "" }}
                        name="password"
                        value={user.password}
                        onChange={changeHandler}
                        error={error.password}
                      />
                      {error.password && (
                        <MDTypography variant="caption" color="error" fontWeight="light">
                          {error.textError}
                        </MDTypography>
                      )}
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <MDInput
                        fullWidth
                        label="Confirm Password"
                        inputProps={{ type: "password", autoComplete: "" }}
                        name="confirm"
                        value={user.confirm}
                        onChange={changeHandler}
                        error={error.confirm}
                      />
                      {error.confirm && (
                        <MDTypography variant="caption" color="error" fontWeight="light">
                          {error.textError}
                        </MDTypography>
                      )}
                    </Grid>
                  </Grid>
                  <MDBox display="flex" flexDirection="column" fullWidth>
                    <MDBox
                      display="flex"
                      flexDirection="column"
                      fullWidth
                      marginBottom="1rem"
                      marginTop="2rem"
                    >
                      <Autocomplete
                        defaultValue=""
                        options={roles}
                        getOptionLabel={(option) => (option ? option.attributes.name : "")}
                        value={value ?? ""}
                        onChange={(event, newValue) => {
                          setValue(newValue);
                        }}
                        renderInput={(params) => (
                          <FormField {...params} label="Role" InputLabelProps={{ shrink: true }} />
                        )}
                      />
                      {error.role && (
                        <MDTypography
                          variant="caption"
                          color="error"
                          fontWeight="light"
                          paddingTop="1rem"
                        >
                          {error.textError}
                        </MDTypography>
                      )}
                    </MDBox>
                    <MDBox
                      display="flex"
                      flexDirection="row"
                      alignItems="center"
                      justifyContent="space-between"
                      fullWidth
                    >
                      <MDBox mt={2} display="flex" flexDirection="column">
                        <InputLabel id="demo-simple-select-label">Profile Image</InputLabel>
                        <MDInput
                          fullWidth
                          type="file"
                          name="attachment"
                          onChange={changeImageHandler}
                          id="file-input"
                          accept="image/*"
                          sx={{ mt: "16px" }}
                        ></MDInput>
                      </MDBox>

                      {imageUrl && (
                        <MDBox ml={4} mt={2}>
                          <MDAvatar src={imageUrl} alt="profile-image" size="xxl" shadow="sm" />
                        </MDBox>
                      )}
                    </MDBox>
                  </MDBox>
                  {error.error && (
                    <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                      {error.textError}
                    </MDTypography>
                  )}
                  <MDBox ml="auto" mt={4} mb={2} display="flex" justifyContent="flex-end">
                    <MDBox mx={2}>
                      <MDButton
                        variant="gradient"
                        color="dark"
                        size="small"
                        px={2}
                        mx={2}
                        onClick={() =>
                          navigate("/examples-api/user-management", {
                            state: { value: false, text: "" },
                          })
                        }
                      >
                        Back
                      </MDButton>
                    </MDBox>
                    <MDButton variant="gradient" color="dark" size="small" type="submit">
                      Save
                    </MDButton>
                  </MDBox>
                </MDBox>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
};

export default NewUser;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-management/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-management/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

// @mui material components
import Card from "@mui/material/Card";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDAlert from "components/MDAlert";

// Material Dashboard 2 PRO React examples
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import Footer from "examples/Footer";
import DataTable from "examples/Tables/DataTable";
import MDButton from "components/MDButton";
import MDAvatar from "components/MDAvatar";
import { Tooltip, IconButton } from "@mui/material";

import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";

import CrudService from "services/cruds-service";
import { useState, useEffect, useContext } from "react";
import { useNavigate, useLocation } from "react-router-dom";

import { AbilityContext } from "Can";
import { useAbility } from "@casl/react";
import { Can } from "Can";
import { subject } from "@casl/ability";

import getId from "services/helper-service";

function UserManagement() {
  let { state } = useLocation();
  const [isDemo, setIsDemo] = useState(false);
  const [user, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [notification, setNotification] = useState({
    value: false,
    text: "",
  });

  const navigate = useNavigate();
  const ability = useAbility(AbilityContext);

  const [tableData, setTableData] = useState([]);

  useEffect(() => {
    (async () => {
      const response = await CrudService.getUsers();
      setUsers(response.data);
      setRoles(response.included);
      setIsDemo(process.env.REACT_APP_IS_DEMO === "true");
    })();
  }, []);

  useEffect(() => {
    if (!state) return;
    setNotification({
      value: state.value,
      text: state.text,
    });
  }, [state]);

  useEffect(() => {
    setTableData(getRows(user));
  }, [user]);

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({
          value: false,
          text: "",
        });
      }, 5000);
    }
  }, [notification]);

  const clickAddHandler = () => {
    navigate("/user-management/new-user");
  };

  const clickEditHandler = (id) => {
    navigate(`/user-management/edit-user/${id}`);
  };

  const clickDeleteHandler = async (e, id) => {
    try {
      if (!confirm("Are you sure you want to delete this user?")) {
        e.nativeEvent.stopImmediatePropagation();
      } else {
        await CrudService.deleteUser(id);
        // the delete does not send a response
        // so I need to get again the tags to set it and this way the table gets updated -> it goes to the useEffect with data dependecy
        const response = await CrudService.getUsers();
        setUsers(response.data);
        setNotification({
          value: true,
          text: "The user has been successfully deleted",
        });
      }
    } catch (err) {
      // it sends error is the category is associated with an item
      console.error(err);
      if (err.hasOwnProperty("errors")) {
        setNotification({
          value: true,
          text: err.errors[0].title,
        });
      }
      return null;
    }
  };

  const getRows = (info) => {
    let updatedInfo = info.map((row) => {
      let roleId = row.relationships.roles.data[0].id;
      let roleName = roles.find((role) => role.id == roleId);
      return {
        type: "users",
        id: row.id,
        image: row.attributes.profile_image,
        name: row.attributes.name,
        email: row.attributes.email,
        role: roleName.attributes.name,
        created_at: row.attributes.created_at,
      };
    });
    return updatedInfo;
  };

  const dataTableData = {
    columns: [
      {
        Header: "image",
        accessor: "image",
        width: "15%",
        disableSortBy: true,
        Cell: ({ cell: { value } }) => {
          return (
            <>
              <MDAvatar src={value} alt="profile-image" size="xl" shadow="sm" />
            </>
          );
        },
      },
      { Header: "name", accessor: "name", width: "15%" },
      { Header: "email", accessor: "email", width: "20%" },
      { Header: "role", accessor: "role", width: "15%" },
      { Header: "created at", accessor: "created_at", width: "15%" },
      {
        Header: "actions",
        disableSortBy: true,
        accessor: "",
        Cell: (info) => {
          return (
            <MDBox display="flex" alignItems="center">
              <Can I="delete" this={subject("users", info.cell.row.original)}>
                {isDemo ? (
                  getId(info.cell.row.original.id) !== 1 &&
                  getId(info.cell.row.original.id) !== 2 &&
                  getId(info.cell.row.original.id) !== 3 && (
                    <Tooltip
                      title="Delete User"
                      onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}
                    >
                      <IconButton>
                        <DeleteIcon />
                      </IconButton>
                    </Tooltip>
                  )
                ) : (
                  <Tooltip
                    title="Delete User"
                    onClick={(e) => clickDeleteHandler(e, info.cell.row.original.id)}
                  >
                    <IconButton>
                      <DeleteIcon />
                    </IconButton>
                  </Tooltip>
                )}
              </Can>
              <Can I="edit" this={subject("users", info.cell.row.original)}>
                {isDemo ? (
                  info.cell.row.original.id !== "1" &&
                  info.cell.row.original.id !== "2" &&
                  info.cell.row.original.id !== "3" && (
                    <Tooltip
                      title="Edit User"
                      onClick={() => clickEditHandler(info.cell.row.original.id)}
                    >
                      <IconButton>
                        <EditIcon />
                      </IconButton>
                    </Tooltip>
                  )
                ) : (
                  <Tooltip
                    title="Edit User"
                    onClick={() => clickEditHandler(info.cell.row.original.id)}
                  >
                    <IconButton>
                      <EditIcon />
                    </IconButton>
                  </Tooltip>
                )}
              </Can>
            </MDBox>
          );
        },
      },
      ,
    ],

    rows: tableData,
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      {notification.value && (
        <MDAlert color="info" my="20px">
          <MDTypography variant="body2" color="white">
            {notification.text}
          </MDTypography>
        </MDAlert>
      )}
      <MDBox pt={6} pb={3}>
        <MDBox mb={3}>
          <Card>
            <MDBox p={3} lineHeight={1} display="flex" justifyContent="space-between">
              <MDTypography variant="h5" fontWeight="medium">
                User Management
              </MDTypography>
              {ability.can("create", "users") && (
                <MDButton
                  variant="gradient"
                  color="dark"
                  size="small"
                  type="submit"
                  onClick={clickAddHandler}
                >
                  + Add User
                </MDButton>
              )}
            </MDBox>
            <DataTable table={dataTableData} />
          </Card>
        </MDBox>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
}

export default UserManagement;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-profile/components/BasicInfo/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-profile/components/BasicInfo/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useEffect, useState } from "react";

// @material-ui core components
import Card from "@mui/material/Card";
import Grid from "@mui/material/Grid";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDButton from "components/MDButton";
import MDAlert from "components/MDAlert";

// Settings page components
import FormField from "layouts/pages/account/components/FormField";

import AuthService from "services/auth-service";

function BasicInfo({ user, isDemo }) {
  const [info, setInfo] = useState({ name: "", email: "" });
  const [notification, setNotification] = useState({ value: false, color: "info", message: "" });

  useEffect(() => {
    setInfo({
      name: user.name,
      email: user.email,
    });
  }, [user]);

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({ value: false, color: "info", message: "" });
      }, 5000);
    }
  }, [notification]);

  const [errors, setErrors] = useState({
    nameError: false,
    emailError: false,
  });

  const changeHandler = (e) => {
    setInfo({
      ...info,
      [e.target.name]: e.target.value,
    });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    // validation
    const mailFormat = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (info.name.trim().length === 0) {
      setErrors({ ...errors, nameError: true });
      return;
    }

    if (info.email.trim().length === 0 || !info.email.trim().match(mailFormat)) {
      setErrors({ ...errors, emailError: true });
      return;
    }

    // set new user data for call
    let userData;
    if (isDemo) {
      userData = {
        data: {
          type: "profile",
          attributes: {
            name: info.name,
            profile_image: user.profile_image ?? null,
          },
        },
      };
    } else {
      userData = {
        data: {
          type: "profile",
          attributes: {
            name: info.name,
            email: info.email,
            profile_image: user.profile_image ?? null,
          },
        },
      };
    }

    // call api for update
    await AuthService.updateProfile(JSON.stringify(userData));

    // reset errors
    setErrors({
      nameError: false,
      emailError: false,
    });

    setNotification({
      value: true,
      color: isDemo ? "secondary" : "info",
      message: isDemo
        ? "You can not update the email in demo version"
        : "Your profile has been updated",
    });
  };

  return (
    <>
      <Card id="basic-info" sx={{ overflow: "visible" }}>
        <MDBox p={3}>
          <MDTypography variant="h5">Basic Info</MDTypography>
        </MDBox>
        <MDBox component="form" pb={3} px={3} method="POST" onSubmit={submitHandler}>
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6}>
              <FormField
                label="First Name"
                placeholder="Alec"
                name="name"
                value={info.name}
                onChange={changeHandler}
                error={errors.nameError}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormField
                label="Email"
                placeholder="example@email.com"
                inputProps={{ type: "email" }}
                name="email"
                value={info.email}
                onChange={changeHandler}
                error={errors.emailError}
              />
            </Grid>
          </Grid>
          <MDBox ml="auto" mt={2} display="flex" justifyContent="flex-end">
            <MDButton variant="gradient" color="dark" size="small" type="submit">
              update
            </MDButton>
          </MDBox>
        </MDBox>
      </Card>
      {notification.value === true && (
        <MDAlert color={notification.color} mt="20px">
          <MDTypography variant="body2" color="white">
            {notification.message}
          </MDTypography>
        </MDAlert>
      )}
    </>
  );
}

export default BasicInfo;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-profile/components/ChangePassword/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-profile/components/ChangePassword/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect } from "react";

// @mui material components
import Card from "@mui/material/Card";
import Grid from "@mui/material/Grid";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDButton from "components/MDButton";
import MDInput from "components/MDInput";
import MDAlert from "components/MDAlert";

import AuthService from "services/auth-service";

function ChangePassword({ user, isDemo }) {
  const passwordRequirements = ["Min 8 characters", "Change it often"];

  const [info, setInfo] = useState({ newPassword: "", confirmPassword: "" });
  const [notification, setNotification] = useState({ value: false, color: "info", message: "" });

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({ value: false, color: "info", message: "" });
      }, 5000);
    }
  }, [notification]);

  const [errors, setErrors] = useState({
    newPassError: false,
    confirmPassError: false,
  });

  const changeHandler = (e) => {
    setInfo({
      ...info,
      [e.target.name]: e.target.value,
    });
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    // validation
    if (isDemo) {
      setNotification({
        value: true,
        color: "secondary",
        message: "You can not update the password in demo version",
      });
      return null;
    } else {
      if (info.newPassword.trim().length < 8) {
        setErrors({ ...errors, newPassError: true });
        return;
      }

      if (info.confirmPassword.trim() !== info.newPassword.trim()) {
        setErrors({ ...errors, confirmPassError: true });
        return;
      }

      let userData;
      // set new user data for call
      // issue here in the get profile the password is not coming so can't verify it and the password needs to have the new password set to save it
      userData = {
        data: {
          type: "profile",
          attributes: {
            password: info.newPassword,
            password_new: info.newPassword,
            password_confirmation: info.confirmPassword,
            profile_image: user.profile_image ?? null,
          },
        },
      };

      // call api for update
      await AuthService.updateProfile(JSON.stringify(userData));

      setInfo({ newPassword: "", confirmPassword: "" });

      // reset errors
      setErrors({
        newPassError: false,
        confirmPassError: false,
      });

      setNotification({
        value: true,
        color: "info",
        message: "Your profile has been updatedn",
      });
    }
  };

  const renderPasswordRequirements = passwordRequirements.map((item, key) => {
    const itemKey = `element-${key}`;

    return (
      <MDBox key={itemKey} component="li" color="text" fontSize="1.25rem" lineHeight={1}>
        <MDTypography variant="button" color="text" fontWeight="regular" verticalAlign="middle">
          {item}
        </MDTypography>
      </MDBox>
    );
  });

  return (
    <>
      {notification.value === true && (
        <MDAlert color={notification.color}>
          <MDTypography variant="body2" color="white">
            {notification.message}
          </MDTypography>
        </MDAlert>
      )}
      <Card id="change-password">
        <MDBox p={3}>
          <MDTypography variant="h5">Change Password</MDTypography>
        </MDBox>
        <MDBox component="form" pb={3} px={3} onSubmit={submitHandler}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <MDInput
                fullWidth
                label="New Password"
                inputProps={{ type: "password", autoComplete: "" }}
                name="newPassword"
                value={info.newPassword}
                onChange={changeHandler}
                error={errors.newPassError}
              />
              {errors.newPassError && (
                <MDTypography variant="caption" color="error" fontWeight="light" pl={2}>
                  The new password should have at least 8 characters
                </MDTypography>
              )}
            </Grid>
            <Grid item xs={12}>
              <MDInput
                fullWidth
                label="Confirm New Password"
                inputProps={{ type: "password", autoComplete: "" }}
                name="confirmPassword"
                value={info.confirmPassword}
                onChange={changeHandler}
                error={errors.confirmPassError}
              />
              {errors.confirmPassError && (
                <MDTypography variant="caption" color="error" fontWeight="light" pl={2}>
                  The password confimation should match the new password
                </MDTypography>
              )}
            </Grid>
          </Grid>
          <MDBox mt={6} mb={1}>
            <MDTypography variant="h5">Password requirements</MDTypography>
          </MDBox>
          <MDBox mb={1}>
            <MDTypography variant="body2" color="text">
              Please follow this guide for a strong password
            </MDTypography>
          </MDBox>
          <MDBox
            display="flex"
            justifyContent="space-between"
            alignItems="flex-end"
            flexWrap="wrap"
          >
            <MDBox component="ul" m={0} pl={3.25} mb={{ xs: 8, sm: 0 }}>
              {renderPasswordRequirements}
            </MDBox>
            <MDBox ml="auto" display="flex" flexDirection="column">
              <MDButton variant="gradient" color="dark" size="small" type="submit">
                update password
              </MDButton>
            </MDBox>
          </MDBox>
        </MDBox>
      </Card>
    </>
  );
}

export default ChangePassword;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-profile/components/Header/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-profile/components/Header/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================
* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)
Coded by www.creative-tim.com
 =========================================================
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect, useContext } from "react";

// @mui material components
import Card from "@mui/material/Card";
import Grid from "@mui/material/Grid";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDAvatar from "components/MDAvatar";
import MDButton from "components/MDButton";
import MDAlert from "components/MDAlert";
import MDInput from "components/MDInput";
import colors from "assets/theme/base/colors";

import AuthService from "services/auth-service";
import CrudService from "services/cruds-service";
import { AuthContext } from "context";

function Header({ user, isDemo }) {
  const authContext = useContext(AuthContext);
  const [image, setImage] = useState("");
  const [fileState, setFileState] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [notification, setNotification] = useState({ value: false, color: "info", message: "" });
  const [error, setError] = useState(null);
  const [role, setRole] = useState("");

  const [id, setId] = useState(null);

  useEffect(() => {
    if (!user) {
      return;
    }
    setImage(user.profile_image);
    setId(user.id);
    (async () => {
      try {
        const response = await authContext.getRole();
        setRole(response);
      } catch (err) {
        console.error(err);
        return null;
      }
    })();
  }, [user]);

  useEffect(() => {
    if (notification.value === true) {
      let timer = setTimeout(() => {
        setNotification({ value: false, color: "info", message: "" });
      }, 5000);
    }
  }, [notification]);

  const changeHandler = (e) => {
    const formData = new FormData();
    formData.append("attachment", e.target.files[0]);
    setFileState(formData);
    setImageUrl(URL.createObjectURL(e.target.files[0]));
    setImage(e.target.files[0]);
  };

  const submitHandler = async (e) => {
    e.preventDefault();

    try {
      if (isDemo) {
        setNotification({
          value: true,
          color: "secondary",
          message: "You can not update the profile image in demo version",
        });
        return null;
      }
      const { url } = await CrudService.imageUpload(fileState, id);
      let userData;
      // set new user data for call
      userData = {
        data: {
          type: "profile",
          attributes: {
            profile_image: `${process.env.REACT_APP_IMAGES}${url}`,
          },
        },
      };
      // call api for update
      try {
        await AuthService.updateProfile(JSON.stringify(userData));
        setNotification({
          value: true,
          color: "info",
          message: "Your profile has been updated",
        });
      } catch (err) {
        setError(err.errors[0].detail);
      }
    } catch (err) {
      setError(err.message);
      return null;
    }
    setError(null);
  };

  return (
    <>
      <Card id="profile">
        <MDBox p={2} component="form" onSubmit={submitHandler} encType="multipart/form-data">
          <Grid
            container
            spacing={3}
            display="flex"
            justifyContent="space-between"
            alignItems="center"
            marginTop="0"
            marginLeft="0"
            width="100%"
          >
            <Grid item position="relative" style={{ paddingLeft: "0", paddingTop: "0" }}>
              <MDAvatar src={imageUrl ?? image} alt="profile-image" size="xl" shadow="sm" />
            </Grid>
            <MDInput
              type="file"
              onChange={changeHandler}
              id="avatar"
              name="attachment"
              accept="image/*"
              sx={{ display: "none", cursor: "pointer" }}
            ></MDInput>
            <Grid item style={{ paddingTop: "0" }}>
              <MDBox height="100%" mt={0.5} lineHeight={1}>
                <MDTypography variant="h5" fontWeight="medium">
                  {user.name ?? "Alex Thompson"}
                </MDTypography>
                <MDTypography variant="button" color="text" fontWeight="medium">
                  {role}
                </MDTypography>
              </MDBox>
            </Grid>
            <MDBox sx={{ ml: "auto" }} display="flex" flexDirection="column">
              <MDBox display="flex" justifyContent="flex-end" flexDirection="row">
                <MDButton
                  variant="gradient"
                  color="info"
                  size="small"
                  component="label"
                  htmlFor="avatar"
                  sx={{ marginRight: "1rem" }}
                >
                  change
                </MDButton>
                <MDButton variant="gradient" color="dark" size="small" type="submit">
                  save
                </MDButton>
              </MDBox>
              {error && (
                <MDTypography variant="caption" color="error" fontWeight="light" pt={2}>
                  {error}
                </MDTypography>
              )}
            </MDBox>
          </Grid>
        </MDBox>
      </Card>
      {notification.value === true && (
        <MDAlert color={notification.color} mt="20px">
          <MDTypography variant="body2" color="white">
            {notification.message}
          </MDTypography>
        </MDAlert>
      )}
    </>
  );
}

export default Header;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/cruds/user-profile/index.js

Code for file: prospera-home/team-dashboard/src/cruds/user-profile/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect } from "react";

// @mui material components
import Grid from "@mui/material/Grid";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";

// Settings page components
import Header from "cruds/user-profile/components/Header";
import BasicInfo from "cruds/user-profile/components/BasicInfo";
import ChangePassword from "cruds/user-profile/components/ChangePassword";
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";

import AuthService from "services/auth-service";
import getId from "services/helper-service";
import Footer from "examples/Footer";

function UserProfile() {
  const [isDemo, setIsDemo] = useState(false);
  const [user, setUser] = useState({
    id: "",
    name: "",
    email: "",
    password: "",
    newPassword: "",
    currentPassword: "",
    confirmPassword: "",
    profile_image: "",
  });

  useEffect(() => {
    (async () => {
      const response = await AuthService.getProfile();
      if (getId(response.data.id) == 1 || getId(response.data.id) == 2 || getId(response.data.id) == 3) {
        setIsDemo(process.env.REACT_APP_IS_DEMO === "true");
      }
      setUser((prevUser) => ({
        ...prevUser,
        id: response.data.id,
        name: response.data.attributes.name,
        email: response.data.attributes.email,
        profile_image: response.data.attributes.profile_image,
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      }));
    })();
  }, []);

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox mt={4}>
        <Grid container spacing={3} justifyContent="center">
          <Grid item xs={12} lg={9}>
            <MDBox mb={3}>
              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <Header user={user} isDemo={isDemo} />
                </Grid>
                <Grid item xs={12}>
                  <BasicInfo user={user} isDemo={isDemo} />
                </Grid>
                <Grid item xs={12}>
                  <ChangePassword user={user} isDemo={isDemo} />
                </Grid>
              </Grid>
            </MDBox>
          </Grid>
        </Grid>
      </MDBox>
      <Footer />
    </DashboardLayout>
  );
}

export default UserProfile;

```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/services/auth-service.js

Code for file: prospera-home/team-dashboard/src/services/auth-service.js

```
import HttpService from "./http.service";

class AuthService {
  login = async (payload) => {
    const loginEndpoint = "login";
    return await HttpService.post(loginEndpoint, payload);
  };

  register = async (credentials) => {
    const registerEndpoint = "register";
    return await HttpService.post(registerEndpoint, credentials);
  };

  logout = async () => {
    const logoutEndpoint = "logout";
    return await HttpService.post(logoutEndpoint);
  };

  forgotPassword = async (payload) => {
    const forgotPassword = "password-forgot";
    return await HttpService.post(forgotPassword, payload);
  };

  resetPassword = async (credentials) => {
    const resetPassword = "password-reset";
    return await HttpService.post(resetPassword, credentials);
  };

  getProfile = async () => {
    const getProfile = "me";
    return await HttpService.get(getProfile);
  };

  updateProfile = async (newInfo) => {
    const updateProfile = "me";
    return await HttpService.patch(updateProfile, newInfo);
  };
}

export default new AuthService();

```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/services/cruds-service.js

Code for file: prospera-home/team-dashboard/src/services/cruds-service.js

```
import HttpService from "./http.service";

class CrudService {
  // users requests
  imageUpload = async (formData, id) => {
    const imageUpdate = `uploads/users/${id}/profile-image`;
    return await HttpService.post(imageUpdate, formData);
  };

  getUsers = async () => {
    const usersEndpoint = "users?include=roles";
    return await HttpService.get(usersEndpoint);
  };

  deleteUser = async (id) => {
    const endpoint = `users/${id}`;
    return await HttpService.delete(endpoint);
  };

  createUser = async (payload) => {
    const endpoint = "users";
    return await HttpService.post(endpoint, payload);
  };

  getUser = async (id) => {
    const endpoint = `users/${id}?include=roles`;
    return await HttpService.get(endpoint);
  };

  getUserWithPermissions = async (id) => {
    const endpoint = `users/${id}?include=roles,roles.permissions`;
    return await HttpService.get(endpoint);
  };

  updateUser = async (payload, id) => {
    const endpoint = `users/${id}`;
    return await HttpService.patch(endpoint, payload);
  };

  // roles requests
  getRoles = async () => {
    const rolesEndpoint = "roles";
    return await HttpService.get(rolesEndpoint);
  };

  deleteRole = async (id) => {
    const endpoint = `roles/${id}`;
    return await HttpService.delete(endpoint);
  };

  createRole = async (payload) => {
    const endpoint = "roles";
    return await HttpService.post(endpoint, payload);
  };

  updateRole = async (payload, id) => {
    const endpoint = `roles/${id}`;
    return await HttpService.patch(endpoint, payload);
  };

  getRole = async (id) => {
    const endpoint = `roles/${id}`;
    return await HttpService.get(endpoint);
  };

  // categories requests
  getCategories = async () => {
    const categoriesEndpoint = "categories";
    return await HttpService.get(categoriesEndpoint);
  };

  deleteCategory = async (id) => {
    const endpoint = `categories/${id}`;
    return await HttpService.delete(endpoint);
  };

  createCategory = async (payload) => {
    const endpoint = "categories";
    return await HttpService.post(endpoint, payload);
  };

  getCategory = async (id) => {
    const categoriesEndpoint = `categories/${id}`;
    return await HttpService.get(categoriesEndpoint);
  };

  updateCategory = async (payload, id) => {
    const categoriesEndpoint = `categories/${id}`;
    return await HttpService.patch(categoriesEndpoint, payload);
  };

  // tag requests
  getTags = async () => {
    const tagsEndpoint = "tags";
    return await HttpService.get(tagsEndpoint);
  };

  deleteTag = async (id) => {
    const endpoint = `tags/${id}`;
    return await HttpService.delete(endpoint);
  };

  createTag = async (payload) => {
    const endpoint = "tags";
    return await HttpService.post(endpoint, payload);
  };

  getTag = async (id) => {
    const endpoint = `tags/${id}`;
    return await HttpService.get(endpoint);
  };

  updateTag = async (payload, id) => {
    const endpoint = `tags/${id}`;
    return await HttpService.patch(endpoint, payload);
  };

  // item requests
  getItems = async () => {
    const tagsEndpoint = "items";
    return await HttpService.get(tagsEndpoint);
  };

  deleteItem = async (id) => {
    const endpoint = `items/${id}`;
    return await HttpService.delete(endpoint);
  };

  getCategoryOfItem = async (id) => {
    const endpoint = `items/${id}/category`;
    return await HttpService.get(endpoint);
  };

  getTagsOfItem = async (id) => {
    const endpoint = `items/${id}/tags`;
    return await HttpService.get(endpoint);
  };

  createItem = async (payload) => {
    const endpoint = "items";
    return await HttpService.post(endpoint, payload);
  };

  itemImageUpload = async (formData, id) => {
    const imageUpdate = `uploads/items/${id}/image`;
    return await HttpService.post(imageUpdate, formData);
  };

  getItem = async (id) => {
    const endpoint = `items/${id}?include=category,tags`
    return await HttpService.get(endpoint);
  }

  updateItem = async (payload, id) => {
    const endpoint = `items/${id}`;
    return await HttpService.patch(endpoint, payload);
  };
}

export default new CrudService();
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/services/helper-service.js

Code for file: prospera-home/team-dashboard/src/services/helper-service.js

```
export const getId = id => {
    const stringId = id;
    const decId = stringId.substring(4, 8);
    const intId = parseInt(decId, 16);
    return intId;
}

export default getId;
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/services/http.service.js

Code for file: prospera-home/team-dashboard/src/services/http.service.js

```
import Axios from "axios";

const API_URL = process.env.REACT_APP_API_URL;
Axios.defaults.baseURL = API_URL;

export class HttpService {
  _axios = Axios.create();

  addRequestInterceptor = (onFulfilled, onRejected) => {
    this._axios.interceptors.request.use(onFulfilled, onRejected);
  };

  addResponseInterceptor = (onFulfilled, onRejected) => {
    this._axios.interceptors.response.use(onFulfilled, onRejected);
  };

  get = async (url) => await this.request(this.getOptionsConfig("get", url));

  post = async (url, data) => await this.request(this.getOptionsConfig("post", url, data));

  put = async (url, data) => await this.request(this.getOptionsConfig("put", url, data));

  patch = async (url, data) => await this.request(this.getOptionsConfig("patch", url, data));

  delete = async (url) => await this.request(this.getOptionsConfig("delete", url));

  getOptionsConfig = (method, url, data) => {
    return { method, url, data, headers: { "Content-Type": "application/vnd.api+json" } };
  };

  request(options) {
    return new Promise((resolve, reject) => {
      this._axios
        .request(options)
        .then((res) => resolve(res.data))
        .catch((ex) => reject(ex.response.data));
    });
  }
}

export default new HttpService();
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/services/interceptor.js

Code for file: prospera-home/team-dashboard/src/services/interceptor.js

```
import HttpService from "./http.service";

export const setupAxiosInterceptors = (onUnauthenticated) => {
  const onRequestSuccess = async (config) => {
    const token = localStorage.getItem("token");
    config.headers.Authorization = `Bearer ${token}`;
    return config;
  };
  const onRequestFail = (error) => Promise.reject(error);

  HttpService.addRequestInterceptor(onRequestSuccess, onRequestFail);

  const onResponseSuccess = (response) => response;

  const onResponseFail = (error) => {
    const status = error.status || error.response.status;
    if (status === 403 || status === 401) {
      onUnauthenticated();
    }

    return Promise.reject(error);
  };
  HttpService.addResponseInterceptor(onResponseSuccess, onResponseFail);
};

```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/App.js

Code for file: prospera-home/team-dashboard/src/App.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import { useState, useEffect, useMemo, useContext } from "react";

// react-router components
import { Routes, Route, Navigate, useLocation, useNavigate } from "react-router-dom";

import { setupAxiosInterceptors } from "services/interceptor";

// @mui material components
import { ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import Icon from "@mui/material/Icon";
import MDAvatar from "components/MDAvatar";

// Material Dashboard 2 PRO React components
import MDBox from "components/MDBox";

// Material Dashboard 2 PRO React examples
import Sidenav from "examples/Sidenav";
import Configurator from "examples/Configurator";

// Material Dashboard 2 PRO React themes
import theme from "assets/theme";
import themeRTL from "assets/theme/theme-rtl";

// Material Dashboard 2 PRO React Dark Mode themes
import themeDark from "assets/theme-dark";
import themeDarkRTL from "assets/theme-dark/theme-rtl";

// RTL plugins
import rtlPlugin from "stylis-plugin-rtl";
import { CacheProvider } from "@emotion/react";
import createCache from "@emotion/cache";

// Material Dashboard 2 PRO React routes
import routes from "routes";
import crudRoutes from "crud.routes";

// Material Dashboard 2 PRO React contexts
import { useMaterialUIController, setMiniSidenav, setOpenConfigurator, AuthContext } from "context";

import { getPermissions } from "config/Permissions";

// Images
import brandWhite from "assets/images/logo-ct.png";
import brandDark from "assets/images/logo-ct-dark.png";
import ProtectedRoute from "examples/ProtectedRoute";
import Login from "auth/login";
import Register from "auth/register";
import ForgotPassword from "auth/forgot-password";
import ResetPassword from "auth/reset-password";
import AuthService from "services/auth-service";
import { Helmet } from "react-helmet";

export default function App({ ability }) {
  const [controller, dispatch] = useMaterialUIController();
  const {
    miniSidenav,
    direction,
    layout,
    openConfigurator,
    sidenavColor,
    transparentSidenav,
    whiteSidenav,
    darkMode,
  } = controller;
  const [onMouseEnter, setOnMouseEnter] = useState(false);
  const [rtlCache, setRtlCache] = useState(null);
  const { pathname } = useLocation();

  const authContext = useContext(AuthContext);
  const [userDetails, setUserDetails] = useState({ name: "", image: "" });

  const [isDemo, setIsDemo] = useState(false);

  useEffect(() => {
    setIsDemo(process.env.REACT_APP_IS_DEMO === "true");
  }, []);

  // if the token expired or other errors it logs out and goes to the login page
  const navigate = useNavigate();
  setupAxiosInterceptors(() => {
    authContext.logout();
    navigate("/auth/login");
  });

  // Cache for the rtl
  useMemo(() => {
    const cacheRtl = createCache({
      key: "rtl",
      stylisPlugins: [rtlPlugin],
    });

    setRtlCache(cacheRtl);
  }, []);

  // Open sidenav when mouse enter on mini sidenav
  const handleOnMouseEnter = () => {
    if (miniSidenav && !onMouseEnter) {
      setMiniSidenav(dispatch, false);
      setOnMouseEnter(true);
    }
  };

  // Close sidenav when mouse leave mini sidenav
  const handleOnMouseLeave = () => {
    if (onMouseEnter) {
      setMiniSidenav(dispatch, true);
      setOnMouseEnter(false);
    }
  };

  // Change the openConfigurator state
  const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);

  // Setting the dir attribute for the body element
  useEffect(() => {
    document.body.setAttribute("dir", direction);
  }, [direction]);

  // Setting page scroll to 0 when changing the route
  useEffect(() => {
    document.documentElement.scrollTop = 0;
    document.scrollingElement.scrollTop = 0;
  }, [pathname]);

  useEffect(() => {
    if (!authContext.isAuthenticated) return;
    (async () => {
      const id = await authContext.getCurrentUser();
      const response = await AuthService.getProfile();
      setUserDetails({
        name: response.data.attributes.name,
        image: response.data.attributes.profile_image,
      });
      const rules = await getPermissions(id);
      ability.update(rules);
    })();
  }, [authContext.isAuthenticated]);

  const getRoutes = (allRoutes) =>
    allRoutes.map((route) => {
      if (route.key === "user-name") {
        route.name = userDetails.name;
        route.icon = <MDAvatar src={userDetails.image} alt="Brooklyn Alice" size="sm" />;
      }
      if (route.collapse) {
        return getRoutes(route.collapse);
      }

      if (route.route) {
        return (
          <Route
            exact
            path={route.route}
            element={
              <ProtectedRoute isAuthenticated={authContext.isAuthenticated}>
                {route.component}
              </ProtectedRoute>
            }
            key={route.key}
          />
        );
      }

      return null;
    });

  const getCrudRoutes = (allRoutes) =>
    allRoutes.map((route) => {
      if (route.collapse) {
        return getCrudRoutes(route.collapse);
      }
      if (route.route) {
        return (
          <Route
            exact
            path={route.route}
            element={
              <ProtectedRoute isAuthenticated={authContext.isAuthenticated}>
                {route.component}
              </ProtectedRoute>
            }
            key={route.key}
          />
        );
      }

      return null;
    });

  const configsButton = (
    <MDBox
      display="flex"
      justifyContent="center"
      alignItems="center"
      width="3.25rem"
      height="3.25rem"
      bgColor="white"
      shadow="sm"
      borderRadius="50%"
      position="fixed"
      right="2rem"
      bottom="2rem"
      zIndex={99}
      color="dark"
      sx={{ cursor: "pointer" }}
      onClick={handleConfiguratorOpen}
    >
      <Icon fontSize="small" color="inherit">
        settings
      </Icon>
    </MDBox>
  );

  return (
    <>
      {isDemo && (
        <Helmet>
          <meta
            name="keywords"
            content="creative tim, updivision, material, node.js json:api, html dashboard, node.js, react, api admin, pro react node.js, html css dashboard node.js, material dashboard node.js, node.js api, pro react material dashboard, material admin, pro react dashboard, pro react admin, web dashboard, bootstrap 5 dashboard node.js, bootstrap 5, css3 dashboard, bootstrap 5 admin node.js, material dashboard bootstrap 5 node.js, frontend, api dashboard, responsive bootstrap 5 dashboard, api, material dashboard, material node.js bootstrap 5 dashboard, json:api"
          />
          <meta
            name="description"
            content="Full stack app with hundreds of reusable UI components powered by MUI component library, React and Node.js API"
          />
          <meta
            itemProp="name"
            content="Material Dashboard 2 React Node.js by Creative Tim & UPDIVISION"
          />
          <meta
            itemProp="description"
            content="Full stack app with hundreds of reusable UI components powered by MUI component library, React and Node.js API"
          />
          <meta
            itemProp="image"
            content="https://s3.amazonaws.com/creativetim_bucket/products/689/original/react-material-dashboard-pro-nodejs.jpg?1664790326"
          />
          <meta name="twitter:card" content="product" />
          <meta name="twitter:site" content="@creativetim" />
          <meta
            name="twitter:title"
            content="Material Dashboard 2 React Node.js by Creative Tim & UPDIVISION"
          />
          <meta
            name="twitter:description"
            content="Full stack app with hundreds of reusable UI components powered by MUI component library, React and Node.js API"
          />
          <meta name="twitter:creator" content="@creativetim" />
          <meta
            name="twitter:image"
            content="https://s3.amazonaws.com/creativetim_bucket/products/689/original/react-material-dashboard-pro-nodejs.jpg?1664790326"
          />
          <meta property="fb:app_id" content="655968634437471" />
          <meta
            property="og:title"
            content="Material Dashboard 2 React Node.js by Creative Tim & UPDIVISION"
          />
          <meta property="og:type" content="article" />
          <meta
            property="og:url"
            content="https://www.creative-tim.com/live/react-material-dashboard-node.js-pro/"
          />
          <meta
            property="og:image"
            content="https://s3.amazonaws.com/creativetim_bucket/products/689/original/react-material-dashboard-pro-nodejs.jpg?1664790326"
          />
          <meta
            property="og:description"
            content="Full stack app with hundreds of reusable UI components powered by MUI component library, React and Node.js API"
          />
          <meta property="og:site_name" content="Creative Tim" />
        </Helmet>
      )}
      {direction === "rtl" ? (
        <CacheProvider value={rtlCache}>
          <ThemeProvider theme={darkMode ? themeDarkRTL : themeRTL}>
            <CssBaseline />
            {layout === "dashboard" && (
              <>
                <Sidenav
                  color={sidenavColor}
                  brand={(transparentSidenav && !darkMode) || whiteSidenav ? brandDark : brandWhite}
                  brandName="Material Dashboard PRO"
                  routes={routes}
                  onMouseEnter={handleOnMouseEnter}
                  onMouseLeave={handleOnMouseLeave}
                />
                <Configurator />
                {configsButton}
              </>
            )}
            {layout === "vr" && <Configurator />}
            <Routes>
              <Route path="/auth/login" element={<Login />} />
              {getRoutes(routes)}
              <Route path="*" element={<Navigate to="/dashboards/analytics" />} />
            </Routes>
          </ThemeProvider>
        </CacheProvider>
      ) : (
        <ThemeProvider theme={darkMode ? themeDark : theme}>
          <CssBaseline />
          {layout === "dashboard" && (
            <>
              <Sidenav
                color={sidenavColor}
                brand={(transparentSidenav && !darkMode) || whiteSidenav ? brandDark : brandWhite}
                brandName="Material Dashboard PRO"
                routes={routes}
                onMouseEnter={handleOnMouseEnter}
                onMouseLeave={handleOnMouseLeave}
              />
              <Configurator />
              {configsButton}
            </>
          )}
          {layout === "vr" && <Configurator />}
          <Routes>
            <Route path="/auth/login" element={<Login />} />
            <Route path="/auth/register" element={<Register />} />
            <Route path="/auth/forgot-password" element={<ForgotPassword />} />
            <Route path="/auth/reset-password" element={<ResetPassword />} />
            {getRoutes(routes)}
            {getCrudRoutes(crudRoutes)}
            <Route path="*" element={<Navigate to="/dashboards/analytics" />} />
          </Routes>
        </ThemeProvider>
      )}
    </>
  );
}
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/Can.js

Code for file: prospera-home/team-dashboard/src/Can.js

```
import { createContextualCan } from "@casl/react";
import React from "react";

export const AbilityContext = React.createContext();
export const Can = createContextualCan(AbilityContext.Consumer);

```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/crud.routes.js

Code for file: prospera-home/team-dashboard/src/crud.routes.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import EditCategory from "cruds/category-management/edit-category";
import NewCategory from "cruds/category-management/new-category";
import EditItem from "cruds/item-management/edit-item";
import NewItem from "cruds/item-management/new-item";
import EditRole from "cruds/role-managament/edit-role";
import NewRole from "cruds/role-managament/new-role";
import EditTag from "cruds/tag-management/edit-tag";
import NewTag from "cruds/tag-management/new-tag";
import EditUser from "cruds/user-management/edit-user";
import NewUser from "cruds/user-management/new-user";

/** 
  All of the routes for the Material Dashboard 2 PRO React are added here,
  You can add a new route, customize the routes and delete the routes here.

  Once you add a new route on this file it will be visible automatically on
  the Sidenav.

  For adding a new route you can follow the existing routes in the routes array.
  1. The `type` key with the `collapse` value is used for a route.
  2. The `type` key with the `title` value is used for a title inside the Sidenav. 
  3. The `type` key with the `divider` value is used for a divider between Sidenav items.
  4. The `name` key is used for the name of the route on the Sidenav.
  5. The `key` key is used for the key of the route (It will help you with the key prop inside a loop).
  6. The `icon` key is used for the icon of the route on the Sidenav, you have to add a node.
  7. The `collapse` key is used for making a collapsible item on the Sidenav that contains other routes
  inside (nested routes), you need to pass the nested routes inside an array as a value for the `collapse` key.
  8. The `route` key is used to store the route location which is used for the react router.
  9. The `href` key is used to store the external links location.
  10. The `title` key is only for the item with the type of `title` and its used for the title text on the Sidenav.
  10. The `component` key is used to store the component of its route.
*/

// Material Dashboard 2 PRO React layouts

const crudRoutes = [
  {
    key: "new-category",
    route: "/category-management/new-category",
    component: <NewCategory />,
    type: "cateogories",
  },
  {
    key: "edit-category",
    route: "/category-management/edit-category/:id",
    component: <EditCategory />,
    type: "cateogories",
  },
  {
    key: "new-tag",
    route: "/tag-management/new-tag",
    component: <NewTag />,
    type: "tags",
  },
  {
    key: "edit-tag",
    route: "/tag-management/edit-tag/:id",
    component: <EditTag />,
    type: "tags",
  },
  {
    key: "new-role",
    route: "/role-management/new-role",
    component: <NewRole />,
    type: "roles",
  },
  {
    key: "edit-role",
    route: "/role-management/edit-role/:id",
    component: <EditRole />,
    type: "roles",
  },
  {
    key: "new-user",
    route: "/user-management/new-user",
    component: <NewUser />,
    type: "users",
  },
  {
    key: "edit-user",
    route: "/user-management/edit-user/:id",
    component: <EditUser />,
    type: "users",
  },
  {
    key: "new-item",
    route: "/item-management/new-item",
    component: <NewItem />,
    type: "items",
  },
  {
    key: "edit-item",
    route: "/item-management/edit-item/:id",
    component: <EditItem />,
    type: "items",
  },
];

export default crudRoutes;

```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/src/index.js

Code for file: prospera-home/team-dashboard/src/index.js

```
/**
=========================================================
* Material Dashboard 2 PRO React - v2.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react
* Copyright 2022 Creative Tim (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import React from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import { Ability } from "@casl/ability";
import App from "App";

// Material Dashboard 2 PRO React Context Provider
import { MaterialUIControllerProvider, AuthContextProvider } from "context";
import { AbilityContext } from "Can";

const container = document.getElementById("root");
const root = createRoot(container);
const ability = new Ability();

root.render(
  <AbilityContext.Provider value={ability}>
    <BrowserRouter>
      <AuthContextProvider>
        <MaterialUIControllerProvider>
          <App ability={ability} />
        </MaterialUIControllerProvider>
      </AuthContextProvider>
    </BrowserRouter>
  </AbilityContext.Provider>
);
```

------------------------------------------------------------------------------------

File: prospera-home/team-dashboard/package.json

Code for file: prospera-home/team-dashboard/package.json

```
{
  "name": "prospera-team-dashboard",
  "version": "1.0.0",
  "private": true,
  "author": "Z",
  "license": "proprietary license for PROSPERA",
  "description": "PROSPERA's Team Dashboard",
  "bugs": {
    "url": "https://github.com/creativetimofficial/ct-material-dashboard-pro-react/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/creativetimofficial/ct-material-dashboard-pro-react.git"
  },
  "engines": {
    "node": "14 || 15 || 16 || 18",
    "npm": ">=6"
  },
  "dependencies": {
    "@asseinfo/react-kanban": "2.2.0",
    "@casl/ability": "^6.5.0",
    "@casl/react": "^3.1.0",
    "@emotion/cache": "11.11.0",
    "@emotion/react": "11.11.1",
    "@emotion/styled": "11.11.0",
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-regular-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/react-fontawesome": "^0.2.0",
    "@fullcalendar/core": "^6.1.9",
    "@fullcalendar/daygrid": "6.1.9",
    "@fullcalendar/interaction": "6.1.9",
    "@fullcalendar/react": "6.1.9",
    "@fullcalendar/timegrid": "6.1.9",
    "@material-ui/pickers": "^3.3.10",
    "@mui/icons-material": "5.14.11",
    "@mui/material": "5.14.11",
    "@mui/styled-engine": "5.14.11",
    "@mui/x-date-pickers": "^6.15.0",
    "@react-jvectormap/core": "1.0.4",
    "@react-jvectormap/world": "1.1.2",
    "@testing-library/jest-dom": "^6.1.3",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "^14.5.1",
    "@types/date-fns": "^2.6.0",
    "axios": "^1.5.1",
    "chart.js": "4.4.0",
    "chroma-js": "2.4.2",
    "date-fns": "^2.28.0",
    "dropzone": "6.0.0-beta.2",
    "flatpickr": "4.6.13",
    "formik": "2.4.5",
    "fs": "0.0.1-security",
    "html-react-parser": "4.2.2",
    "ng-fullcalendar": "^2.0.3",
    "prop-types": "15.8.1",
    "react": "^18.0.0",
    "react-chartjs-2": "5.2.0",
    "react-dom": "^18.0.0",
    "react-flatpickr": "3.10.13",
    "react-github-btn": "1.4.0",
    "react-images-viewer": "1.7.1",
    "react-input-color": "^4.0.0",
    "react-helmet": "^6.1.0",
    "react-quill": "^2.0.0",
    "react-router-dom": "6.2.1",
    "react-scripts": "^5.0.1",
    "react-table": "7.8.0",
    "stylis": "4.3.0",
    "stylis-plugin-rtl": "2.1.1",
    "uuid": "9.0.1",
    "web-vitals": "^3.5.0",
    "yup": "1.3.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "install:clean": "rm -rf node_modules/ && rm -rf package-lock.json && npm install --legacy-peer-deps && npm start",
    "install:peer-deps": "npm install --legacy-peer-deps"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "eslint": "8.50.0",
    "eslint-config-airbnb": "19.0.4",
    "eslint-config-prettier": "9.0.0",
    "eslint-plugin-import": "2.28.1",
    "eslint-plugin-jsx-a11y": "6.7.1",
    "eslint-plugin-prettier": "5.0.0",
    "eslint-plugin-react": "7.33.2",
    "eslint-plugin-react-hooks": "4.6.0",
    "prettier": "3.0.3"
  },
  "homepage": "https://td.prosperadefi.com",
  "proxy": "https://api.prosperadefi.com/"
}

```